// Model for solving the diffusion equation:
// phi' = c*lap(phi)
// phi' = c * (phi_xx + phi_yy)

<?R
	source("conf.R")
  c_header();
  
  s = PV(DensityAll$name[DensityAll$group=="s"])
	i = PV(DensityAll$name[DensityAll$group=="i"])
	r = PV(DensityAll$name[DensityAll$group=="r"])
?>


CudaDeviceFunction float2 Color() {
  float2 ret;
  ret.x = <?R C(sum(s)) ?>;
  ret.y = <?R C(sum(i)) ?>;
  return ret;
}

CudaDeviceFunction real_t getNoOfSuspected() {
    return  populationDensity(0,0) * (<?R C(sum(s)) ?>);
}

CudaDeviceFunction real_t getNoOfInfected() {
    return populationDensity(0,0) * (<?R C(sum(i)) ?>);
}

CudaDeviceFunction real_t getNoOfRecovered() {
    return populationDensity(0,0) * (<?R C(sum(r)) ?>);
}

CudaDeviceFunction real_t getFractionSuspected() {
    return <?R C(sum(s)) ?>;
}

CudaDeviceFunction real_t getFractionInfected() {
    return <?R C(sum(i)) ?>;
}

CudaDeviceFunction real_t getFractionRecovered() {
    return <?R C(sum(r)) ?>;
}

CudaDeviceFunction real_t getFractionSum() {
    return getFractionSuspected() + getFractionInfected() + getFractionRecovered();
}

CudaDeviceFunction real_t getTotalNoOfIndividuals() {
	return  populationDensity(0,0) * getFractionSum();
}

CudaDeviceFunction real_t getPopulationDensity() {
  return populationDensity(0,0);
}

CudaDeviceFunction void PopulationDensitySmoothing(){
	real_t lap_popden = populationDensity(-1,0) + populationDensity(1,0) + populationDensity(0,-1) + populationDensity(0,1) - 4*populationDensity(0,0);
	real_t temp = population_smoothing * population_smoothing * lap_popden;
	populationDensity = populationDensity(0,0) + temp;
}

CudaDeviceFunction void Init() { 
	populationDensity = Init_PopulationDensity;
	Init_eq(populationDensity);
}

CudaDeviceFunction void Init_eq(real_t rho)
{
	//=== THIS IS AUTOMATICALLY GENERATED CODE ===
	real_t Sigma2 = 0.333333333333333*stability_enhancement/rho;
	//--- processing s ---
	//equilibrium
	real_t s_eq_000 = Init_S_Fraction;
	real_t s_eq_100 = 0;
	real_t s_eq_010 = 0;
	real_t s_eq_200 = Init_S_Fraction*Sigma2;
	real_t s_eq_020 = Init_S_Fraction*Sigma2;
	real_t s_eq_110 = 0;
	real_t s_eq_210 = 0;
	real_t s_eq_120 = 0;
	real_t s_eq_220 = Init_S_Fraction*Sigma2*Sigma2;
	//back to density-probability functions
	s000 = s_eq_000 - s_eq_020 - s_eq_200 + s_eq_220;
	s100 = 1/2.*s_eq_100 - 1/2.*s_eq_120 + 1/2.*s_eq_200 - 1/2.*s_eq_220;
	s200 = -1/2.*s_eq_100 + 1/2.*s_eq_120 + 1/2.*s_eq_200 - 1/2.*s_eq_220;
	s010 = 1/2.*s_eq_010 + 1/2.*s_eq_020 - 1/2.*s_eq_210 - 1/2.*s_eq_220;
	s110 = 1/4.*s_eq_110 + 1/4.*s_eq_120 + 1/4.*s_eq_210 + 1/4.*s_eq_220;
	s210 = -1/4.*s_eq_110 - 1/4.*s_eq_120 + 1/4.*s_eq_210 + 1/4.*s_eq_220;
	s020 = -1/2.*s_eq_010 + 1/2.*s_eq_020 + 1/2.*s_eq_210 - 1/2.*s_eq_220;
	s120 = -1/4.*s_eq_110 + 1/4.*s_eq_120 - 1/4.*s_eq_210 + 1/4.*s_eq_220;
	s220 = 1/4.*s_eq_110 - 1/4.*s_eq_120 - 1/4.*s_eq_210 + 1/4.*s_eq_220;
	//--- processing i ---
	//equilibrium
	real_t i_eq_000 = Init_I_Fraction;
	real_t i_eq_100 = 0;
	real_t i_eq_010 = 0;
	real_t i_eq_200 = Init_I_Fraction*Sigma2;
	real_t i_eq_020 = Init_I_Fraction*Sigma2;
	real_t i_eq_110 = 0;
	real_t i_eq_210 = 0;
	real_t i_eq_120 = 0;
	real_t i_eq_220 = Init_I_Fraction*Sigma2*Sigma2;
	//back to density-probability functions
	i000 = i_eq_000 - i_eq_020 - i_eq_200 + i_eq_220;
	i100 = 1/2.*i_eq_100 - 1/2.*i_eq_120 + 1/2.*i_eq_200 - 1/2.*i_eq_220;
	i200 = -1/2.*i_eq_100 + 1/2.*i_eq_120 + 1/2.*i_eq_200 - 1/2.*i_eq_220;
	i010 = 1/2.*i_eq_010 + 1/2.*i_eq_020 - 1/2.*i_eq_210 - 1/2.*i_eq_220;
	i110 = 1/4.*i_eq_110 + 1/4.*i_eq_120 + 1/4.*i_eq_210 + 1/4.*i_eq_220;
	i210 = -1/4.*i_eq_110 - 1/4.*i_eq_120 + 1/4.*i_eq_210 + 1/4.*i_eq_220;
	i020 = -1/2.*i_eq_010 + 1/2.*i_eq_020 + 1/2.*i_eq_210 - 1/2.*i_eq_220;
	i120 = -1/4.*i_eq_110 + 1/4.*i_eq_120 - 1/4.*i_eq_210 + 1/4.*i_eq_220;
	i220 = 1/4.*i_eq_110 - 1/4.*i_eq_120 - 1/4.*i_eq_210 + 1/4.*i_eq_220;
	//--- processing r ---
	//equilibrium
	real_t r_eq_000 = Init_R_Fraction;
	real_t r_eq_100 = 0;
	real_t r_eq_010 = 0;
	real_t r_eq_200 = Init_R_Fraction*Sigma2;
	real_t r_eq_020 = Init_R_Fraction*Sigma2;
	real_t r_eq_110 = 0;
	real_t r_eq_210 = 0;
	real_t r_eq_120 = 0;
	real_t r_eq_220 = Init_R_Fraction*Sigma2*Sigma2;
	//back to density-probability functions
	r000 = r_eq_000 - r_eq_020 - r_eq_200 + r_eq_220;
	r100 = 1/2.*r_eq_100 - 1/2.*r_eq_120 + 1/2.*r_eq_200 - 1/2.*r_eq_220;
	r200 = -1/2.*r_eq_100 + 1/2.*r_eq_120 + 1/2.*r_eq_200 - 1/2.*r_eq_220;
	r010 = 1/2.*r_eq_010 + 1/2.*r_eq_020 - 1/2.*r_eq_210 - 1/2.*r_eq_220;
	r110 = 1/4.*r_eq_110 + 1/4.*r_eq_120 + 1/4.*r_eq_210 + 1/4.*r_eq_220;
	r210 = -1/4.*r_eq_110 - 1/4.*r_eq_120 + 1/4.*r_eq_210 + 1/4.*r_eq_220;
	r020 = -1/2.*r_eq_010 + 1/2.*r_eq_020 + 1/2.*r_eq_210 - 1/2.*r_eq_220;
	r120 = -1/4.*r_eq_110 + 1/4.*r_eq_120 - 1/4.*r_eq_210 + 1/4.*r_eq_220;
	r220 = 1/4.*r_eq_110 - 1/4.*r_eq_120 - 1/4.*r_eq_210 + 1/4.*r_eq_220;
}

CudaDeviceFunction void Run() {
	if ((NodeType & NODE_ADDITIONALS) == NODE_Smoothing){
		PopulationDensitySmoothing();
		Init_eq(populationDensity);
	}
	else{
		populationDensity = populationDensity(0,0);
		real_t omega_ade = 1.0/(3*diffusivity+0.5);
			// if ((NodeType & NODE_BOUNDARY) != 0) omega_ade = 1.0/(3*diffusivity_buffer+0.5);
		
		switch (NodeType & NODE_COLLISION) {    
			case NODE_MRT:

			relax_and_collide_SIR_M(populationDensity, omega_ade);
			break;
		}
	}
 }




CudaDeviceFunction void relax_and_collide_SIR_M(real_t rho, real_t omega_ade) 
{
	//=== THIS IS AUTOMATICALLY GENERATED CODE ===
	real_t Sigma2 = 0.333333333333333*stability_enhancement/rho;
	real_t s = s000 + s010 + s020 + s100 + s110 + s120 + s200 + s210 + s220;
	real_t i = i000 + i010 + i020 + i100 + i110 + i120 + i200 + i210 + i220;
	real_t r = r000 + r010 + r020 + r100 + r110 + r120 + r200 + r210 + r220;
	real_t temp000;
	real_t temp100;
	real_t temp010;
	real_t temp200;
	real_t temp020;
	real_t temp110;
	real_t temp210;
	real_t temp120;
	real_t temp220;
	 //--- processing s ---
	temp000 = s000;
	temp100 = s100;
	temp010 = s010;
	temp200 = s200;
	temp020 = s020;
	temp110 = s110;
	temp210 = s210;
	temp120 = s120;
	temp220 = s220;
	//raw moments from density-probability functions
	s000 = temp000 + temp010 + temp020 + temp100 + temp110 + temp120 + temp200 + temp210 + temp220;
	s100 = temp100 + temp110 + temp120 - temp200 - temp210 - temp220;
	s010 = temp010 - temp020 + temp110 - temp120 + temp210 - temp220;
	s200 = temp100 + temp110 + temp120 + temp200 + temp210 + temp220;
	s020 = temp010 + temp020 + temp110 + temp120 + temp210 + temp220;
	s110 = temp110 - temp120 - temp210 + temp220;
	s210 = temp110 - temp120 + temp210 - temp220;
	s120 = temp110 + temp120 - temp210 - temp220;
	s220 = temp110 + temp120 + temp210 + temp220;
	//collide
	real_t s_star_000 = -s*(i*sir_beta - 1.);
	real_t s_star_100 = -s100*(omega_ade - 1.);
	real_t s_star_010 = -s010*(omega_ade - 1.);
	real_t s_star_200 = -Sigma2*s*(i*sir_beta - 1.);
	real_t s_star_020 = -Sigma2*s*(i*sir_beta - 1.);
	real_t s_star_110 = 0;
	real_t s_star_210 = -s210*(omega_ade - 1.);
	real_t s_star_120 = -s120*(omega_ade - 1.);
	real_t s_star_220 = -Sigma2*Sigma2*s*(i*sir_beta - 1.);
	//back to density-probability functions
	s000 = s_star_000 - s_star_020 - s_star_200 + s_star_220;
	s100 = 1/2.*s_star_100 - 1/2.*s_star_120 + 1/2.*s_star_200 - 1/2.*s_star_220;
	s200 = -1/2.*s_star_100 + 1/2.*s_star_120 + 1/2.*s_star_200 - 1/2.*s_star_220;
	s010 = 1/2.*s_star_010 + 1/2.*s_star_020 - 1/2.*s_star_210 - 1/2.*s_star_220;
	s110 = 1/4.*s_star_110 + 1/4.*s_star_120 + 1/4.*s_star_210 + 1/4.*s_star_220;
	s210 = -1/4.*s_star_110 - 1/4.*s_star_120 + 1/4.*s_star_210 + 1/4.*s_star_220;
	s020 = -1/2.*s_star_010 + 1/2.*s_star_020 + 1/2.*s_star_210 - 1/2.*s_star_220;
	s120 = -1/4.*s_star_110 + 1/4.*s_star_120 - 1/4.*s_star_210 + 1/4.*s_star_220;
	s220 = 1/4.*s_star_110 - 1/4.*s_star_120 - 1/4.*s_star_210 + 1/4.*s_star_220;
	 //--- processing i ---
	temp000 = i000;
	temp100 = i100;
	temp010 = i010;
	temp200 = i200;
	temp020 = i020;
	temp110 = i110;
	temp210 = i210;
	temp120 = i120;
	temp220 = i220;
	//raw moments from density-probability functions
	i000 = temp000 + temp010 + temp020 + temp100 + temp110 + temp120 + temp200 + temp210 + temp220;
	i100 = temp100 + temp110 + temp120 - temp200 - temp210 - temp220;
	i010 = temp010 - temp020 + temp110 - temp120 + temp210 - temp220;
	i200 = temp100 + temp110 + temp120 + temp200 + temp210 + temp220;
	i020 = temp010 + temp020 + temp110 + temp120 + temp210 + temp220;
	i110 = temp110 - temp120 - temp210 + temp220;
	i210 = temp110 - temp120 + temp210 - temp220;
	i120 = temp110 + temp120 - temp210 - temp220;
	i220 = temp110 + temp120 + temp210 + temp220;
	//collide
	real_t i_star_000 = i*(s*sir_beta - sir_gamma + 1.);
	real_t i_star_100 = -i100*(omega_ade - 1.);
	real_t i_star_010 = -i010*(omega_ade - 1.);
	real_t i_star_200 = Sigma2*i*(s*sir_beta - sir_gamma + 1.);
	real_t i_star_020 = Sigma2*i*(s*sir_beta - sir_gamma + 1.);
	real_t i_star_110 = 0;
	real_t i_star_210 = -i210*(omega_ade - 1.);
	real_t i_star_120 = -i120*(omega_ade - 1.);
	real_t i_star_220 = Sigma2*Sigma2*i*(s*sir_beta - sir_gamma + 1.);
	//back to density-probability functions
	i000 = i_star_000 - i_star_020 - i_star_200 + i_star_220;
	i100 = 1/2.*i_star_100 - 1/2.*i_star_120 + 1/2.*i_star_200 - 1/2.*i_star_220;
	i200 = -1/2.*i_star_100 + 1/2.*i_star_120 + 1/2.*i_star_200 - 1/2.*i_star_220;
	i010 = 1/2.*i_star_010 + 1/2.*i_star_020 - 1/2.*i_star_210 - 1/2.*i_star_220;
	i110 = 1/4.*i_star_110 + 1/4.*i_star_120 + 1/4.*i_star_210 + 1/4.*i_star_220;
	i210 = -1/4.*i_star_110 - 1/4.*i_star_120 + 1/4.*i_star_210 + 1/4.*i_star_220;
	i020 = -1/2.*i_star_010 + 1/2.*i_star_020 + 1/2.*i_star_210 - 1/2.*i_star_220;
	i120 = -1/4.*i_star_110 + 1/4.*i_star_120 - 1/4.*i_star_210 + 1/4.*i_star_220;
	i220 = 1/4.*i_star_110 - 1/4.*i_star_120 - 1/4.*i_star_210 + 1/4.*i_star_220;
	 //--- processing r ---
	temp000 = r000;
	temp100 = r100;
	temp010 = r010;
	temp200 = r200;
	temp020 = r020;
	temp110 = r110;
	temp210 = r210;
	temp120 = r120;
	temp220 = r220;
	//raw moments from density-probability functions
	r000 = temp000 + temp010 + temp020 + temp100 + temp110 + temp120 + temp200 + temp210 + temp220;
	r100 = temp100 + temp110 + temp120 - temp200 - temp210 - temp220;
	r010 = temp010 - temp020 + temp110 - temp120 + temp210 - temp220;
	r200 = temp100 + temp110 + temp120 + temp200 + temp210 + temp220;
	r020 = temp010 + temp020 + temp110 + temp120 + temp210 + temp220;
	r110 = temp110 - temp120 - temp210 + temp220;
	r210 = temp110 - temp120 + temp210 - temp220;
	r120 = temp110 + temp120 - temp210 - temp220;
	r220 = temp110 + temp120 + temp210 + temp220;
	//collide
	real_t r_star_000 = i*sir_gamma + r;
	real_t r_star_100 = -r100*(omega_ade - 1.);
	real_t r_star_010 = -r010*(omega_ade - 1.);
	real_t r_star_200 = Sigma2*(i*sir_gamma + r);
	real_t r_star_020 = Sigma2*(i*sir_gamma + r);
	real_t r_star_110 = 0;
	real_t r_star_210 = -r210*(omega_ade - 1.);
	real_t r_star_120 = -r120*(omega_ade - 1.);
	real_t r_star_220 = Sigma2*Sigma2*(i*sir_gamma + r);
	//back to density-probability functions
	r000 = r_star_000 - r_star_020 - r_star_200 + r_star_220;
	r100 = 1/2.*r_star_100 - 1/2.*r_star_120 + 1/2.*r_star_200 - 1/2.*r_star_220;
	r200 = -1/2.*r_star_100 + 1/2.*r_star_120 + 1/2.*r_star_200 - 1/2.*r_star_220;
	r010 = 1/2.*r_star_010 + 1/2.*r_star_020 - 1/2.*r_star_210 - 1/2.*r_star_220;
	r110 = 1/4.*r_star_110 + 1/4.*r_star_120 + 1/4.*r_star_210 + 1/4.*r_star_220;
	r210 = -1/4.*r_star_110 - 1/4.*r_star_120 + 1/4.*r_star_210 + 1/4.*r_star_220;
	r020 = -1/2.*r_star_010 + 1/2.*r_star_020 + 1/2.*r_star_210 - 1/2.*r_star_220;
	r120 = -1/4.*r_star_110 + 1/4.*r_star_120 - 1/4.*r_star_210 + 1/4.*r_star_220;
	r220 = 1/4.*r_star_110 - 1/4.*r_star_120 - 1/4.*r_star_210 + 1/4.*r_star_220;

}
