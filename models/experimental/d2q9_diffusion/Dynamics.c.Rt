// Model for solving the spatial Allen Cahn equation.
// This model is to compare first (Euler) and second (Trapezoidal) integration scheme for the source term, Q=lambda*phi*(1-phi^2)
// phi' =  M*lap(phi) + lambda*phi*(1-phi^2)
// phi' =  M *(phi_xx + phi_yy) + lambda*phi*(1-phi^2)
// maintainer: Grzegorz Gruszczynski @ggruszczynski

<?R  
	source("conf.R")
	c_header();
	source("lib/boundary.R")

  	f = PV(DensityAll$name[DensityAll$group=="f"])

?>


CudaDeviceFunction float2 Color() {
  float2 ret;
  ret.x = 0;
  ret.y = <?R C(sum(f)) ?>;
  return ret;
}

// ------------------------ PARAVIEW OUTPUT BLOCK ------------------------
// Use this functions is only for vtk output.
// Nodes are created using streamed, post-collision DF.
// RunBoundaries are called in orded to assign the desired value at the boundary.
// It can make a difference in convergence study and nicer preview.

CudaDeviceFunction real_t getPhaseField() {
	return <?R C(sum(f)) ?>;
}

// ------------------------ END OF PARAVIEW OUTPUT BLOCK ------------------------

CudaDeviceFunction void Init() { 
	real_t pf = Init_PhaseField;
	Init_eq(pf);
}

CudaDeviceFunction void Run() {
	real_t omega_phi_soi=1.0/(3*diffusivity_phi+0.5);
	SRT(omega_phi_soi);
 }

 CudaDeviceFunction void Init_eq(real_t Init_Phi) 
 {
	 f000 = Init_Phi*4./9.;
	 f100 = Init_Phi*1./9.;
	 f200 = Init_Phi*1./9.;
	 f010 = Init_Phi*1./9.;
	 f110 = Init_Phi*1./36.;
	 f210 = Init_Phi*1./36.;
	 f020 = Init_Phi*1./9.;
	 f120 = Init_Phi*1./36.;
	 f220 = Init_Phi*1./36.;
 }

CudaDeviceFunction void SRT(real_t omega_ade) 
{
	real_t tilde_phi = f000 + f010 + f020 + f100 + f110 + f120 + f200 + f210 + f220;
	
	real_t feq000 = tilde_phi*4./9.;
	real_t feq100 = tilde_phi*1./9.;
	real_t feq200 = tilde_phi*1./9.;
	real_t feq010 = tilde_phi*1./9.;
	real_t feq110 = tilde_phi*1./36.;
	real_t feq210 = tilde_phi*1./36.;
	real_t feq020 = tilde_phi*1./9.;
	real_t feq120 = tilde_phi*1./36.;
	real_t feq220 = tilde_phi*1./36.;

	f000 = f000 + omega_ade*(feq000-f000);
	f100 = f100 + omega_ade*(feq100-f100);
	f010 = f010 + omega_ade*(feq010-f010);
	f200 = f200 + omega_ade*(feq200-f200);
	f020 = f020 + omega_ade*(feq020-f020);
	f110 = f110 + omega_ade*(feq110-f110);
	f210 = f210 + omega_ade*(feq210-f210);
	f120 = f120 + omega_ade*(feq120-f120);
	f220 = f220 + omega_ade*(feq220-f220);
}
