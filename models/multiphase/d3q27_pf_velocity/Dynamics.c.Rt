<?R
    source("conf.R")
    c_header();
    source("lib/feq.R")
    source("lib/boundary.R")
?>
// 04/02/2017 - Model Developed: A. Fakhari, T. Mitchell
//    Extension to 3D from:
// """" A roust phase-field lattice Boltzmann model
//		for immiscible fluids at high density ratios """"
//
// Maintainer: Travis-Mitchell @TravisMitchell

// Code updates:
//		01/04/2017: Development starts...
//			    Plan is d3q27 for hydrodynamics
//			    and d3q15 for interface dynamics
//		08/04/2017: Development status update ...
//			    Code builds and runs stable for density
//			    ratio up to 100, but layered Poiseuille
//			    flow does not appear symmetric,#DebugFunTimes
//			    - #DebugFunTimes have passed, validated with:
//				- Layered Poiseuille flow
//				- Rayleigh Taylor up to water-air like properties and Re=3000
//				- Validated with air Taylor bubble rising through olive oil
//				  experiment by Bugg et al. (2002)
//		14/08/2017: Look to improve readability by incorporating more R code
//				- e.g. for MRT operations etc.
//		12/12/2017: Model updated for inclusion in v6.2
//				- MRT collision updated to moment space
//				- Symmetry bounds removed, autosym added to options
//				- BGK made option
//		21/03/2018: Fix of solid contact
//				- Previous issue with bulk solid regions i.e. solid cells
//				  surrounded by all solid nodes
//				- Check added for these cases to stop nan appearances
//		12/09/2019: Re-write to d3q27q27 in order of d3q27_cumulants
//				- Namely to create standard definitions in TCLB for directions
//				- Allow for Interpolated BB to be used
//
<?R
    g=PV(DensityAll$name[DensityAll$group=="g"])
# Extracting velocity set
    U = as.matrix(DensityAll[DensityAll$group=="g",c("dx","dy","dz")])
    u = PV(c("U","V","W"))
    absCi2 = (U[,1]*U[,1]+U[,2]*U[,2]+U[,3]*U[,3])
# Formulate Weighted-MRT matrix
    m0 = matrix(1, 1, 27)
#1st order:    
    m1 = U[,1]
    m2 = U[,2]
    m3 = U[,3]
#2nd order:
    m4 = U[,1]*U[,2]
    m5 = U[,2]*U[,3]
    m6 = U[,3]*U[,1]
    m7 = 3*U[,1]*U[,1] - absCi2
    m8 = U[,2]*U[,2] - U[,3]*U[,3]
    m9 = absCi2 - 1
#3rd order:
    m10 = U[,1] * (3*absCi2 - 5)
    m11 = U[,2] * (3*absCi2 - 5)
    m12 = U[,3] * (3*absCi2 - 5)
    m13 = U[,1] * (U[,2]*U[,2] - U[,3]*U[,3])
    m14 = U[,2] * (U[,3]*U[,3] - U[,1]*U[,1])
    m15 = U[,3] * (U[,1]*U[,1] - U[,2]*U[,2])
    m16 = U[,1]*U[,2]*U[,3]
#4th order:
#    m17 = 0.5 * (3*absCi2*absCi2 - 9*absCi2+4) - incorrect formulation from Abbas paper
    m17 = 0.5 * (3*absCi2*absCi2 - 7*absCi2+2)
    m18 = (3*absCi2 - 4) * (3*U[,1]*U[,1] - absCi2)
    m19 = (3*absCi2 - 4) * (U[,2]*U[,2] - U[,3]*U[,3])
    m20 = U[,1]*U[,2]*(3*absCi2 - 7)
    m21 = U[,2]*U[,3]*(3*absCi2 - 7)
    m22 = U[,3]*U[,1]*(3*absCi2 - 7)
#5th order:
# incorrect formulation from Abbas paper
#    m23 = 0.5 * U[1,] * (9*absCi2*absCi2 - 33*absCi2+81)
#    m24 = 0.5 * U[2,] * (9*absCi2*absCi2 - 33*absCi2+81)
#    m25 = 0.5 * U[3,] * (9*absCi2*absCi2 - 33*absCi2+81)
#    m26 = 0.5 * (9*absCi2*absCi2*absCi2 - 18*absCi2*absCi2 + 87*absCi2 - 26)
    m23 = 0.5 * U[,1]*(9*absCi2*absCi2 - 33*absCi2 + 26)
    m24 = 0.5 * U[,2]*(9*absCi2*absCi2 - 33*absCi2 + 26)
    m25 = 0.5 * U[,3]*(9*absCi2*absCi2 - 33*absCi2 + 26)
#6th order:
    m26 = 0.5 * (9*absCi2*absCi2*absCi2 - 36*absCi2*absCi2 + 33*absCi2 - 2)
M = rbind(m0,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15,m16,m17,m18,m19,m20,m21,m22,m23,m24,m25,m26)
m = PV(c(paste("m[",1:27-1,"]",sep="")))
invM = solve(M)
EQ = MRT_eq(U,PV(1),u,mat=t(M))
myWeighting = subst(EQ$feq,rho=1, U=0, V=0, W=0)
EQ_h = MRT_eq(U,PV(1),u)
selR = EQ$order < 10
EQ$Req[1] = PV("p")
EQ$feq = solve(M) %*% EQ$Req
Omega = PV(rep(1,sum(selR)))
Omega[5:9] = PV("tau")^(-1)
Omega[1:4] = PV(1)

geq = PV(c(paste("geq[",1:27-1,"]",sep="")))
Fi  = PV(c(paste("F_i[",1:27-1,"]",sep="")))
#h   = PV(c(paste("h",1:27-1,sep="")))
h=PV(DensityAll$name[DensityAll$group=="h"])
omega = PV("omega_phi")
heq  = PV(c(paste("heq[",1:27-1,"]",sep="")))
Fphi = PV(c(paste("F_phi[",1:27-1,"]",sep="")))

phase = PV("PhaseF")
gamma = PV(c(paste("Gamma[",1:27-1,"]",sep="")))

if (Options$OutFlow) {
	g_neighbours = Density$nicename[Density$group =="g"]
	h_neighbours = Density$nicename[Density$group =="h"]
	g_old = PV(Density$name[Density$group == "gold"])
	h_old = PV(Density$name[Density$group == "hold"])
	g_n = PV(paste(g_neighbours,"(",-Density$dx[Density$group=="g"]-1,",",-Density$dy[Density$group=="g"],",",-Density$dz[Density$group=="g"],")",sep=""))
	h_n = PV(paste(h_neighbours,"(",-Density$dx[Density$group=="h"]-1,",",-Density$dy[Density$group=="h"],",",-Density$dz[Density$group=="h"],")",sep=""))
	U_loc = PV("U_local")
	U_inv = PV("invU")
}
?>

#include <math.h>
#define PI 3.14159265

/* MRT Matrix Check:
<?R
#options(width=200)
#print(M)

#printf <- function(...) cat(sprintf(...))

#myWeighting = sapply(ToC(subst(EQ$feq,rho=1, uq=0, uy=0, uz=0), as.numeric)  
#printf("Orthogonality Check \n")
#for (i in 1:27) {
#	printf("Moment %d: ", i-1)
#	for (j in i:27) {
#		tmp <- myWeighting %*% ( M[i,] * M[j,] )
#		printf(" %.2f,", tmp)  
#	}
#	printf("\n")
#}
?>
*/

//	EXPORTABLE QUANTITIES:
CudaDeviceFunction real_t getRho(){
	real_t rho;
	rho = Density_l + (Density_h-Density_l) * (PhaseF(0,0) - PhaseField_l)/(PhaseField_h - PhaseField_l);
	return rho;
}

CudaDeviceFunction real_t getPhaseField(){
	return PhaseF(0,0,0);
}
CudaDeviceFunction vector_t getU(){
	vector_t u;
	u.x = U;
	u.y = V;
	u.z = W;
	return u;
}
CudaDeviceFunction real_t getP(){
	real_t   p = <?R C(sum(g)) ?>; // Normalised pressure p* = p/(rho.cs^2)
	real_t   d = <?R C(sum(h)) ?>; // Phase Field

	p = p*(Density_h + (d - PhaseField_l)*(Density_h-Density_l))/3.0;
	return p;
}
CudaDeviceFunction vector_t getNormal(){
	vector_t n;
	n.x = nw_x;
	n.y = nw_y;
	n.z = nw_z;
	return n;
}

// 	HELPER FUNCTIONS:
CudaDeviceFunction vector_t calcGradPhi(){
	vector_t gradPhi = {0.0,0.0,0.0};
#ifdef OPTIONS_OutFlow
	if ((NodeType & NODE_BOUNDARY) == NODE_ENeumann || (NodeType & NODE_BOUNDARY) == NODE_EConvect) {
	gradPhi.x = 0.0;
	gradPhi.y = 16.00 * (PhaseF(0,1,0) - PhaseF(0,-1,0))
	  			+ 2.0*(PhaseF(-1,1,1) - PhaseF(-1,-1,1)
	  			+ PhaseF(-1,1,-1)- PhaseF(-1,-1,-1))
	  			+  4.00 * (2.0*( PhaseF(-1,1,0) - PhaseF(-1,-1,0))
	          		+  PhaseF(0,1,1) - PhaseF(0,-1,1) + PhaseF(0,1,-1) - PhaseF(0,-1,-1));
	gradPhi.z = 16.00 * (PhaseF(0,0,1) - PhaseF(0,0,-1))
	  			+ 2.0*( PhaseF(-1,1,1) + PhaseF(-1,-1,1)
	  			-  PhaseF(-1,1,-1)- PhaseF(-1,-1,-1))
	  			+  4.00 * (2.0*( PhaseF(-1,0,1) - PhaseF(-1,0,-1))
	          		+  PhaseF(0,1,1) + PhaseF(0,-1,1) - PhaseF(0,1,-1) - PhaseF(0,-1,-1));
	} else if ((NodeType & NODE_BOUNDARY)) {
		// If single phase inlet/outlet, don't want periodic bounds
		// to interfere - can cause waves/instabilities
		gradPhi.x = 0.0;
		gradPhi.y = 0.0;
		gradPhi.z = 0.0;
	} else {	
	gradPhi.x = 16.00 * (PhaseF(1,0,0) - PhaseF(-1,0,0))
	  			+ PhaseF(1,1,1) - PhaseF(-1,1,1) + PhaseF(1,-1,1) - PhaseF(-1,-1,1)
	  			+ PhaseF(1,1,-1)- PhaseF(-1,1,-1)+ PhaseF(1,-1,-1)- PhaseF(-1,-1,-1)
	  			+  4.00 * (PhaseF(1,1,0) - PhaseF(-1,1,0) + PhaseF(1,-1,0) - PhaseF(-1,-1,0)
		  		+  PhaseF(1,0,1) - PhaseF(-1,0,1) + PhaseF(1,0,-1) - PhaseF(-1,0,-1));
	gradPhi.y = 16.00 * (PhaseF(0,1,0) - PhaseF(0,-1,0))
	  			+ PhaseF(1,1,1) + PhaseF(-1,1,1) - PhaseF(1,-1,1) - PhaseF(-1,-1,1)
	  			+ PhaseF(1,1,-1)+ PhaseF(-1,1,-1)- PhaseF(1,-1,-1)- PhaseF(-1,-1,-1)
	  			+  4.00 * (PhaseF(1,1,0) + PhaseF(-1,1,0) - PhaseF(1,-1,0) - PhaseF(-1,-1,0)
	          		+  PhaseF(0,1,1) - PhaseF(0,-1,1) + PhaseF(0,1,-1) - PhaseF(0,-1,-1));
	gradPhi.z = 16.00 * (PhaseF(0,0,1) - PhaseF(0,0,-1))
	  			+ PhaseF(1,1,1) + PhaseF(-1,1,1) + PhaseF(1,-1,1) + PhaseF(-1,-1,1)
	  			- PhaseF(1,1,-1)- PhaseF(-1,1,-1)- PhaseF(1,-1,-1)- PhaseF(-1,-1,-1)
	  			+  4.00 * (PhaseF(1,0,1) + PhaseF(-1,0,1) - PhaseF(1,0,-1) - PhaseF(-1,0,-1)
	          		+  PhaseF(0,1,1) + PhaseF(0,-1,1) - PhaseF(0,1,-1) - PhaseF(0,-1,-1));
	}
#else
	gradPhi.x = 16.00 * (PhaseF(1,0,0) - PhaseF(-1,0,0))
	  			+ PhaseF(1,1,1) - PhaseF(-1,1,1) + PhaseF(1,-1,1) - PhaseF(-1,-1,1)
	  			+ PhaseF(1,1,-1)- PhaseF(-1,1,-1)+ PhaseF(1,-1,-1)- PhaseF(-1,-1,-1)
	  			+  4.00 * (PhaseF(1,1,0) - PhaseF(-1,1,0) + PhaseF(1,-1,0) - PhaseF(-1,-1,0)
		  		+  PhaseF(1,0,1) - PhaseF(-1,0,1) + PhaseF(1,0,-1) - PhaseF(-1,0,-1));
	gradPhi.y = 16.00 * (PhaseF(0,1,0) - PhaseF(0,-1,0))
	  			+ PhaseF(1,1,1) + PhaseF(-1,1,1) - PhaseF(1,-1,1) - PhaseF(-1,-1,1)
	  			+ PhaseF(1,1,-1)+ PhaseF(-1,1,-1)- PhaseF(1,-1,-1)- PhaseF(-1,-1,-1)
	  			+  4.00 * (PhaseF(1,1,0) + PhaseF(-1,1,0) - PhaseF(1,-1,0) - PhaseF(-1,-1,0)
	          		+  PhaseF(0,1,1) - PhaseF(0,-1,1) + PhaseF(0,1,-1) - PhaseF(0,-1,-1));
	gradPhi.z = 16.00 * (PhaseF(0,0,1) - PhaseF(0,0,-1))
	  			+ PhaseF(1,1,1) + PhaseF(-1,1,1) + PhaseF(1,-1,1) + PhaseF(-1,-1,1)
	  			- PhaseF(1,1,-1)- PhaseF(-1,1,-1)- PhaseF(1,-1,-1)- PhaseF(-1,-1,-1)
	  			+  4.00 * (PhaseF(1,0,1) + PhaseF(-1,0,1) - PhaseF(1,0,-1) - PhaseF(-1,0,-1)
	          		+  PhaseF(0,1,1) + PhaseF(0,-1,1) - PhaseF(0,1,-1) - PhaseF(0,-1,-1));
#endif	
	gradPhi.x /= 72.0;
	gradPhi.y /= 72.0;
	gradPhi.z /= 72.0;
	return gradPhi;
}

CudaDeviceFunction void Boundary_Switcher(){
    switch (NodeType & NODE_BOUNDARY) {
		case NODE_Solid:
		case NODE_Wall:
			BounceBack();
			break;
		case NODE_EVelocity:
			EVelocity();
			break;
		case NODE_WVelocity:
			WVelocity();
			break;
		case NODE_EPressure:
			EPressure();
			break;
		case NODE_WPressure:
			WPressure();
			break;
		case NODE_MovingWall_N:
			MovingNWall();
			break;
		case NODE_MovingWall_S:
			MovingSWall();
			break;
#ifdef OPTIONS_OutFlow
		case NODE_EConvect:
			EConvect();
			break;
		case NODE_ENeumann:
			ENeumann();
			break;
#endif
	}
}

CudaDeviceFunction void Initialisation_setups(){
// Pre-defined Initialisation patterns:
	// Diffuse interface sphere
	   // BubbleType = -1 refers to light fluid bubble.
        if ( Radius > 0 ){ 
                real_t Ri;
                Ri = sqrt( (X - CenterX)*(X - CenterX) + (Y - CenterY)*(Y - CenterY) + (Z - CenterZ)*(Z - CenterZ) );
                PhaseF = 0.5*(PhaseField_h + PhaseField_l)
                       - 0.5*(PhaseField_h - PhaseField_l) * BubbleType * tanh(2 * (Ri - Radius)/IntWidth);
        }	
 	// Rayleigh-Taylor Instability
	    // Initialises with a sharp interface
	if (RTI_Characteristic_Length > 0){
		real_t d = RTI_Characteristic_Length;
		real_t ycutoff;
		ycutoff = 2.0*d + 0.05*d*(cos(2.0*PI*X/d) + cos(2.0*PI*Z/d));
		if (Y < ycutoff) {PhaseF = 0.0; }
		else             {PhaseF = 1.0;	}
	}

	// Create shape for Annular Taylor bubble initialisation
	if ( DonutTime > 0){
		real_t intLocation = Donut_D * 
					sqrt( pow(Donut_h,2) 
					    - pow( DonutTime - sqrt(pow(Y-CenterY,2) + pow(Z-CenterZ,2)), 2) );
		real_t shifter = atan2( (Z-CenterZ), (Y-CenterY) );
		if (shifter < 0) shifter = shifter + 2*PI;
		if (  (X < Donut_x0 + intLocation * sin(shifter/2.0) ) && (X > Donut_x0 - intLocation) )
		{
			PhaseF = 0.0;
		} else {
			PhaseF = 1.0;
		}
	}
}

CudaDeviceFunction void calcPhaseF(){
	Boundary_Switcher();
#ifdef OPTIONS_RT
	PhaseF_old = PhaseF(0,0,0);
#endif
	PhaseF = <?R C(sum(h))?>;
#ifdef OPTIONS_filter
	pressure = <?R C(sum(g)) ?>;
#endif
}

CudaDeviceFunction void calcWallPhase(){
	PhaseF = PhaseF(0,0,0); //For fluid nodes.
	if ( IamWall || IamSolid ) {
		real_t a, h, pf_f;
		pf_f = PhaseF_dyn(nw_x, nw_y, nw_z);
		if (pf_f != pf_f){
			//printf("Check results, phase field in norm dirn is incorrect\n");
			pf_f = 1.0;
		}
		h = 0.5 * sqrt(nw_x*nw_x + nw_y*nw_y + nw_z*nw_z);
		if (h < 0.001) { 
		// If I am a wall/solid node and I am surrounded by solid nodes
			PhaseF = 1;
		} else if (fabs(radAngle-1.570796) < 0.1){
		// If I am not surrounded, but contact angle is 90
			PhaseF = pf_f;
		} else {
			a = -h * (4.0/IntWidth) * cos(radAngle);
			PhaseF = (1 + a - sqrt( (1+a)*(1+a) - 4*a*pf_f))/(a+1e-8) - pf_f;
		}
		if (PhaseF != PhaseF) PhaseF=1.0;
	} 
}

CudaDeviceFunction real_t calcMu(real_t C){
	real_t pfavg, lpPhi, mu;
	pfavg = 0.5*(PhaseField_l+PhaseField_h);
#ifdef OPTIONS_OutFlow
	if ((NodeType & NODE_BOUNDARY) == NODE_ENeumann || (NodeType & NODE_BOUNDARY) == NODE_EConvect) { 
	lpPhi = 16.0 *( 2.0* PhaseF(-1,0,0)
        	     + (PhaseF(0,1,0)) + (PhaseF(0,-1,0))
        	     + (PhaseF(0,0,1)) + (PhaseF(0,0,-1)))
       	       + 1.0 *(  2.0*(PhaseF(-1,1,1)
       		     + (PhaseF(-1,-1,1))
             	     + (PhaseF(-1,1,-1))
                     + (PhaseF(-1,-1,-1))))
       	       + 4.0 *(2.0*( (PhaseF(-1,1,0))
	     	     + (PhaseF(-1,-1,0))
	             + (PhaseF(-1,0,1))
	             + (PhaseF(-1,0,-1)))
	             + (PhaseF(0,1,1)) + (PhaseF(0,-1,1))
	             + (PhaseF(0,1,-1))+ (PhaseF(0,-1,-1)))
	       - 152.0 * PhaseF(0,0,0);
	} else if ((NodeType & NODE_BOUNDARY)) {
		// If single phase inlet/outlet, don't want periodic bounds
		// to interfere - can cause waves/instabilities
		lpPhi = 0.0;
	} else {
	lpPhi = 16.0 *((PhaseF(1,0,0)) + (PhaseF(-1,0,0))
        	     + (PhaseF(0,1,0)) + (PhaseF(0,-1,0))
        	     + (PhaseF(0,0,1)) + (PhaseF(0,0,-1)))
       	       + 1.0 *((PhaseF(1,1,1)) + (PhaseF(-1,1,1))
       		     + (PhaseF(1,-1,1))+ (PhaseF(-1,-1,1))
             	     + (PhaseF(1,1,-1))+ (PhaseF(-1,1,-1))
                     + (PhaseF(1,-1,-1))+(PhaseF(-1,-1,-1)))
       	       + 4.0 *((PhaseF(1,1,0)) + (PhaseF(-1,1,0))
	     	     + (PhaseF(1,-1,0))+ (PhaseF(-1,-1,0))
	             + (PhaseF(1,0,1)) + (PhaseF(-1,0,1))
	             + (PhaseF(1,0,-1))+ (PhaseF(-1,0,-1))
	             + (PhaseF(0,1,1)) + (PhaseF(0,-1,1))
	             + (PhaseF(0,1,-1))+ (PhaseF(0,-1,-1)))
	       - 152.0 * PhaseF(0,0,0);
	}
#else
	lpPhi = 16.0 *((PhaseF(1,0,0)) + (PhaseF(-1,0,0))
        	     + (PhaseF(0,1,0)) + (PhaseF(0,-1,0))
        	     + (PhaseF(0,0,1)) + (PhaseF(0,0,-1)))
       	       + 1.0 *((PhaseF(1,1,1)) + (PhaseF(-1,1,1))
       		     + (PhaseF(1,-1,1))+ (PhaseF(-1,-1,1))
             	     + (PhaseF(1,1,-1))+ (PhaseF(-1,1,-1))
                     + (PhaseF(1,-1,-1))+(PhaseF(-1,-1,-1)))
       	       + 4.0 *((PhaseF(1,1,0)) + (PhaseF(-1,1,0))
	     	     + (PhaseF(1,-1,0))+ (PhaseF(-1,-1,0))
	             + (PhaseF(1,0,1)) + (PhaseF(-1,0,1))
	             + (PhaseF(1,0,-1))+ (PhaseF(-1,0,-1))
	             + (PhaseF(0,1,1)) + (PhaseF(0,-1,1))
	             + (PhaseF(0,1,-1))+ (PhaseF(0,-1,-1)))
	       - 152.0 * PhaseF(0,0,0);
#endif
	lpPhi /= 36.0;

	mu = 4.0*(12.0*sigma/IntWidth)*(C-PhaseField_l)*(C-PhaseField_h)*(C-pfavg)
	       - (1.5 *sigma*IntWidth) * lpPhi;
	return mu;
}

//	INITIALISATION:
CudaDeviceFunction void Init() {
	PhaseF = PhaseField;
#ifdef OPTIONS_RT
	PhaseF_old = PhaseF;
#endif
	Initialisation_setups();

	if ( IamWall || IamSolid ) PhaseF = -999;
}

CudaDeviceFunction void Init_wallNorm(){
	PhaseF = PhaseF(0,0,0);
	real_t my_ex[27] = {<?R cat(U[,1],sep=",") ?>} ;
	real_t my_ey[27] = {<?R cat(U[,2],sep=",") ?>} ;
	real_t my_ez[27] = {<?R cat(U[,3],sep=",") ?>} ;
	
	if ( IamWall || IamSolid ) {
	// Am I surrounded by solid nodes?
		int i,j,k;
	  	real_t tmp = 0.0;
	  	for (i=-1;i<2;i++){for (j=-1;j<2;j++){for (k=-1;k<2;k++){
			tmp += PhaseF_dyn(i,j,k);
	  	}}}

	  	if ( abs(tmp) > 26000){
		// yes I am surrounded (sum(pf) = 27*-999 = -26973 if surrounded):
			nw_x = 0.0;nw_y = 0.0;nw_z = 0.0;
	  	} else { 
		// no I am not surrounded, so calc normal:
			int solidFlag[27], maxi;
			real_t myNorm[3] = {0.0,0.0,0.0};
			real_t maxn=0.0, dot;

			// Calculate the normal direction:
			<?R
			    myN   = PV(paste0("myNorm[",1:3-1,"]"))
			    pf    = PV(paste0("PhaseF(",U[,1],",",U[,2],",",U[,3],")/-998"))
			    solid = PV(paste0("solidFlag[",1:27-1,"]"))
			
			    C(solid, pf)
			    C(myN,t(U) %*% (solid * myWeighting) * (-1/3))
			?>
			
			tmp = myNorm[0]*myNorm[0] + myNorm[1]*myNorm[1] + myNorm[2]*myNorm[2];
			
			// Calculate the closest discrete direction for normal:
			for (i = 0; i<27; i++) {
				dot = (myNorm[0]*my_ex[i] + myNorm[1]*my_ey[i] + myNorm[2]*my_ez[i]) /
			      		sqrt( tmp*(my_ex[i]*my_ex[i] + my_ey[i]*my_ey[i] + 
					 	   my_ez[i]*my_ez[i]) + 1e-12);
				if (dot > maxn) {
					maxn = dot; maxi = i;
				}
			}
			if (maxi < 0) {
				// This should not happen ?
				nw_x = 0.0;nw_y = 0.0;nw_z = 0.0;
			} else {
				nw_x = my_ex[maxi];nw_y = my_ey[maxi];nw_z = my_ez[maxi];
			}
	  	}
	} else {
	// I am a fluid node, I don't need no solid normal.
		nw_x = 0.0;nw_y = 0.0;nw_z = 0.0;
	}
}

CudaDeviceFunction void Init_distributions(){
// Initialise phase variables:
//	int i;
	real_t C0 = 0.5*(PhaseField_h - PhaseField_l);
	
	PhaseF = PhaseF(0,0,0);
// Gradients and phasefield normals:
	real_t nx, ny, nz, magnPhi;
	vector_t gradPhi = calcGradPhi();
	magnPhi = sqrt(gradPhi.x*gradPhi.x + gradPhi.y*gradPhi.y + gradPhi.z*gradPhi.z + 1e-32);

	nx = gradPhi.x/magnPhi; ny = gradPhi.y/magnPhi; nz = gradPhi.z/magnPhi;

// Define Equilibrium, then initialise all da things
	U = VelocityX;	V = VelocityY;	W = VelocityZ;
	real_t mag = U*U + V*V + W*W;
	real_t Gamma[27];
	real_t F_phi[27]; 
	real_t tmp1 = (1.0 - 4.0*(PhaseF - C0)*(PhaseF - C0))/IntWidth;
	<?R
		tmp1 = PV("tmp1")
		my_n = PV(c("nx","ny","nz"))
# Determine heq:
		C(gamma, EQ_h$feq)   #Determine Gamma, Fakhari et al. PRE 96 (2017) eq.10
		C(Fphi, myWeighting * tmp1 * ( my_n %*% t(U) )) #Determine Fphi, Fakhari et al. PRE 96 (2017) eq.7
		C(h, phase * gamma - 0.5 * Fphi)
# Determine geq:
		press = PV("Pressure")
		C(g, press*myWeighting + (gamma-myWeighting) )
	?>	
	PhaseF = <?R C(sum(h)) ?>;
#ifdef OPTIONS_filter
	pressure = <?R C(sum(g)) ?>;
#endif
#ifdef OPTIONS_OutFlow
        if ((NodeType & NODE_BOUNDARY) == NODE_EConvect){
                <?R if (Options$OutFlow){
                        C(g_old, g)
                        C(h_old, h)     }       ?>
        }
#endif
}

//	ITERATION:
CudaDeviceFunction void Run() {
// If desired, incorporate a smoothing stage, in this we simply let diffusion occur
    if ((NodeType & NODE_ADDITIONALS) == NODE_Smoothing) {
	Init_distributions();
    } else {	
	Boundary_Switcher();
	}

#ifdef OPTIONS_BGK
        if (NodeType & NODE_BGK) 
	{
            CollisionBGK();
	}
#elif OPTIONS_CM
	if (NodeType & NODE_CM)
	{
	    CollisionCM();
	}
#else
        if (NodeType & NODE_MRT)
        {
            CollisionMRT();
        } 
#endif
}

#ifndef OPTIONS_BGK
#ifndef OPTIONS_CM
CudaDeviceFunction void CollisionMRT(){
	PhaseF = PhaseF(0,0,0);
	int i, j;
	real_t C = PhaseF(0,0,0), mu;
	real_t tau, DynVisc, rho, p;			// Macroscopic Properties
	vector_t gradPhi;				// Phase field gradients
	real_t nx, ny, nz, magnPhi;			// Normals
	real_t F_pressure[3], F_body[3], F_mu[3], F_total[3]; // Forces
	real_t tmp1, stress[6]={0.0,0.0,0.0,0.0,0.0,0.0};     // Stress tensor calculation
	real_t F_phi[27], heq[27];			// Phase field collision terms
	real_t F_i[27];					// Momentum distribution forcing term
	real_t m[27]; 					//MRT Details

#ifdef OPTIONS_RT
	real_t u_old[3] = {U, V, W};
#endif
// Find Macroscopic Details
	mu = calcMu( C );
	rho = Density_l + (C - PhaseField_l)*(Density_h - Density_l)/(PhaseField_h - PhaseField_l);
	
	AddToTotalDensity( rho ); // Add globals of post-stream, pre-collide macroscopic globals.
	AddToKineticEnergy( rho*(U*U + V*V + W*W) );

	if ( C < 0.5 ) 
	{
	   // AddToGasTotalVelocity( sqrt(U*U + V*V + W*W));
	    AddToGasTotalVelocityX( U );
	    AddToGasTotalVelocityY( V );
	    AddToGasTotalVelocityZ( W );
	    AddToGasCells(1);
	 
	    AddToCoM_X( X );
	    AddToCoM_Y( Y );
	    AddToCoM_Z( Z );
	}

	real_t m0[27];
<?R
	m0 = PV("m0[",1:27-1,"]")
	C(m0[selR], (M %*% g)[selR])
	F_total = PV("F_total[",1:3-1,"]")
	rho = PV("rho")
	rho.inv = rho ^ (-1)
?>
	p = m0[0];
	
// Update tau:
	if ( C < PhaseField_l){
		tau = tau_l + 0.5;
	} else if (C > PhaseField_h) {
		tau = tau_h + 0.5;
	} else {
	// Linear update:
		tau = 0.5 + tau_l + (C-PhaseField_l)*(tau_h - tau_l)/(PhaseField_h - PhaseField_l);
	}
#ifdef OPTIONS_filter
	real_t Peclet, umag;
	vector_t Fa = {0.0, 0.0, 0.0};
	
	umag = U*U + V*V + W*W;
	// Apply filter similar to Sitompul et al (2019) cumulant violant two-phase flows
	if ( umag / ( (tau-0.5)/3.0 ) > 1 ) {
		real_t u_filter[6];
		u_filter[0] = 0.5*(U(0,0,0) + U(1,0,0) ); 
		u_filter[1] = 0.5*(U(0,0,0) + U(-1,0,0)); 
		u_filter[2] = 0.5*(U(0,0,0) + U(0,1,0) ); 
		u_filter[3] = 0.5*(U(0,0,0) + U(0,-1,0)); 
		u_filter[4] = 0.5*(U(0,0,0) + U(0,0,1) ); 
		u_filter[5] = 0.5*(U(0,0,0) + U(0,0,-1)); 
		Fa.x = 0.5*rho *( 
			  u_filter[0] * ( U(0,0,0) - U(-1,0,0) ) - u_filter[1] * ( U(0,0,0) - U(1,0,0) )
			+ u_filter[2] * ( U(0,0,0) - U(0,-1,0) ) - u_filter[3] * ( U(0,0,0) - U(0,1,0) )
			+ u_filter[4] * ( U(0,0,0) - U(0,0,-1) ) - u_filter[5] * ( U(0,0,0) - U(0,0,1) )
			);
		Fa.y = 0.5*rho *( 
			  u_filter[0] * ( V(0,0,0) - V(-1,0,0) ) - u_filter[1] * ( V(0,0,0) - V(1,0,0) )
			+ u_filter[2] * ( V(0,0,0) - V(0,-1,0) ) - u_filter[3] * ( V(0,0,0) - V(0,1,0) )
			+ u_filter[4] * ( V(0,0,0) - V(0,0,-1) ) - u_filter[5] * ( V(0,0,0) - V(0,0,1) )
			);
		Fa.z = 0.5*rho *( 
			  u_filter[0] * ( W(0,0,0) - W(-1,0,0) ) - u_filter[1] * ( W(0,0,0) - W(1,0,0) )
			+ u_filter[2] * ( W(0,0,0) - W(0,-1,0) ) - u_filter[3] * ( W(0,0,0) - W(0,1,0) )
			+ u_filter[4] * ( W(0,0,0) - W(0,0,-1) ) - u_filter[5] * ( W(0,0,0) - W(0,0,1) )
			);
	} 

	p = (1.0/216.0) * ( 64.0*pressure(0,0,0) +
	                    16.0*(pressure(1,0,0) + pressure(-1,0,0)
			         +pressure(0,1,0) + pressure(0,-1,0)
				 +pressure(0,0,1) + pressure(0,0,-1)) +
			     4.0*(pressure(1,1,0) + pressure(-1,1,0) + pressure(1,-1,0) + pressure(-1,-1,0)
				 +pressure(1,0,1) + pressure(-1,0,1) + pressure(1,0,-1) + pressure(-1,0,-1)
				 +pressure(0,1,1) + pressure(0,-1,1) + pressure(0,1,-1) + pressure(0,-1,-1)) + 
			     1.0*(pressure(1,1,1) + pressure(-1,1,1) + pressure(1,-1,1) + pressure(-1,-1,1)
				 +pressure(1,1,-1) + pressure(-1,1,-1) + pressure(1,-1,-1) + pressure(-1,-1,-1))
			  );
#endif

// GRADIENTS AND NORMALS
	gradPhi = calcGradPhi();
	magnPhi = sqrt(gradPhi.x*gradPhi.x + gradPhi.y*gradPhi.y + gradPhi.z*gradPhi.z + 1e-32);
	nx = gradPhi.x/magnPhi;
	ny = gradPhi.y/magnPhi;
	nz = gradPhi.z/magnPhi;

// CALCULATE FORCES:
	F_pressure[0] = (-1.0/3.0) * p * (Density_h-Density_l) * gradPhi.x;
	F_pressure[1] = (-1.0/3.0) * p * (Density_h-Density_l) * gradPhi.y;
	F_pressure[2] = (-1.0/3.0) * p * (Density_h-Density_l) * gradPhi.z;
	// can apply body force either through buoyancy Fakhari et al. 2017
	//  or through the normal rho*G technique
	F_body[0] = (Density_h-rho)*BuoyancyX + rho*GravitationX;
	F_body[1] = (Density_h-rho)*BuoyancyY + rho*GravitationY;
	F_body[2] = (Density_h-rho)*BuoyancyZ + rho*GravitationZ;

//  Viscous Force:
//	1. determine stress tensor
//	2. from this determine F_mu
//  	3. and then compile total force - iterate through to update velocity
//	   and redetermine stress to ensure more accurate F_total
for (j=0;j<2;j++) {
<?R
	C(m[selR], (m0 - EQ$Req)[selR] * Omega)

	stress = PV("stress[",1:6-1,"]");
	new_g = solve(M) %*% m
	C(stress[1], sum( U[,1]*U[,1] * new_g )); # XX
	C(stress[2], sum( U[,1]*U[,2] * new_g )); # XY
	C(stress[3], sum( U[,1]*U[,3] * new_g )); # XZ
	C(stress[4], sum( U[,2]*U[,2] * new_g )); # YY
	C(stress[5], sum( U[,2]*U[,3] * new_g )); # YZ
	C(stress[6], sum( U[,3]*U[,3] * new_g )); # ZZ
?>

	F_mu[0] = (0.5-tau) * (Density_h-Density_l) * (stress[0]*gradPhi.x + stress[1]*gradPhi.y + stress[2]*gradPhi.z);
	F_mu[1] = (0.5-tau) * (Density_h-Density_l) * (stress[1]*gradPhi.x + stress[3]*gradPhi.y + stress[4]*gradPhi.z);
	F_mu[2] = (0.5-tau) * (Density_h-Density_l) * (stress[2]*gradPhi.x + stress[4]*gradPhi.y + stress[5]*gradPhi.z);
	F_total[0] = mu*gradPhi.x + F_pressure[0] + F_body[0] + F_mu[0];
	F_total[1] = mu*gradPhi.y + F_pressure[1] + F_body[1] + F_mu[1];
	F_total[2] = mu*gradPhi.z + F_pressure[2] + F_body[2] + F_mu[2];

#ifdef OPTIONS_filter
	F_total[0] += Fa.x;
	F_total[1] += Fa.y;
	F_total[2] += Fa.z;
#endif

<?R 	C( u, m0[2:4] + 0.5 * F_total * rho.inv) ?>
}
// PHASE FIELD POPULATION UPDATE:
	tmp1 = (1.0 - 4.0*(C - 0.5)*(C - 0.5))/IntWidth;
<?R
	C(heq, EQ_h$feq * PV("C"))

	n = PV("n",c("x","y","z"))
if (Options$RT) {
	u_old = PV(c("u_old[0]","u_old[1]","u_old[2]"))
	pf_old= PV("PhaseF_old")
	pf    = PV("PhaseF")
	C(Fphi, myWeighting * PV("tmp1") * (U %*% n) + 3.0 * U %*% (pf*u - pf_old*u_old) )
} else {
	C(Fphi, myWeighting * PV("tmp1") * (U %*% n))
}	
# 	SRT Relaxation for h
	C(h, h - omega * (h - heq + 0.5*Fphi) + Fphi)

#	MRT Relaxation for g
	mF = PV(rep(0,27))
	mF[2:4] = F_total * rho.inv

	C(m, m0 - (m0 - EQ$Req + mF*0.5)[selR] * Omega + mF)
	C(g, invM %*% m)
?>
	global_trackers( C );
}
#endif
#endif

#ifdef OPTIONS_CM
CudaDeviceFunction void CollisionCM(){
	PhaseF = PhaseF(0,0,0);
	int i, j;
	real_t C = PhaseF(0,0,0), mu;
	real_t tau, DynVisc, rho, p;			// Macroscopic Properties
	vector_t gradPhi, F_total, u;				// Phase field gradients
	real_t nx, ny, nz, magnPhi;			// Normals
	real_t F_pressure[3], F_body[3], F_mu[3]; // Forces
	real_t tmp1, stress[6]={0.0,0.0,0.0,0.0,0.0,0.0};     // Stress tensor calculation
	real_t F_phi[27], heq[27];			// Phase field collision terms
	real_t F_i[27];					// Momentum distribution forcing term
	real_t m[27]; 					//MRT Details

#ifdef OPTIONS_RT
	real_t u_old[3] = {U, V, W};
#endif
// Find Macroscopic Details
	mu = calcMu( C );
	rho = Density_l + (C - PhaseField_l)*(Density_h - Density_l)/(PhaseField_h - PhaseField_l);
	
	AddToTotalDensity( rho ); // Add globals of post-stream, pre-collide macroscopic globals.
	AddToKineticEnergy( rho*(U*U + V*V + W*W) );

	if ( C < 0.5 ) 
	{
	   // AddToGasTotalVelocity( sqrt(U*U + V*V + W*W));
	    AddToGasTotalVelocityX( U );
	    AddToGasTotalVelocityY( V );
	    AddToGasTotalVelocityZ( W );
	    AddToGasCells(1);
	 
	    AddToCoM_X( X );
	    AddToCoM_Y( Y );
	    AddToCoM_Z( Z );
	}
	
	real_t m0[27];
<?R
	m0 = PV("m0[",1:27-1,"]")
	C(m0[selR], (M %*% g)[selR])
	F_total = PV(c("F_total.x","F_total.y","F_total.z"))
	rho = PV("rho")
	rho.inv = rho ^ (-1)
?>
	p = m0[0];

// Update tau:
	if ( C < PhaseField_l){
		tau = tau_l + 0.5;
	} else if (C > PhaseField_h) {
		tau = tau_h + 0.5;
	} else {
	// Linear update:
		tau = 0.5 + tau_l + (C-PhaseField_l)*(tau_h - tau_l)/(PhaseField_h - PhaseField_l);
	}
	real_t omega_nu = 1.0/tau;
// GRADIENTS AND NORMALS
	gradPhi = calcGradPhi();
	magnPhi = sqrt(gradPhi.x*gradPhi.x + gradPhi.y*gradPhi.y + gradPhi.z*gradPhi.z + 1e-32);
	nx = gradPhi.x/magnPhi;
	ny = gradPhi.y/magnPhi;
	nz = gradPhi.z/magnPhi;
// CALCULATE FORCES:
	F_pressure[0] = (-1.0/3.0) * p * (Density_h-Density_l) * gradPhi.x;
	F_pressure[1] = (-1.0/3.0) * p * (Density_h-Density_l) * gradPhi.y;
	F_pressure[2] = (-1.0/3.0) * p * (Density_h-Density_l) * gradPhi.z;
	// can apply body force either through buoyancy Fakhari et al. 2017
	//  or through the normal rho*G technique
	F_body[0] = (Density_h-rho)*BuoyancyX + rho*GravitationX;
	F_body[1] = (Density_h-rho)*BuoyancyY + rho*GravitationY;
	F_body[2] = (Density_h-rho)*BuoyancyZ + rho*GravitationZ;

//  Viscous Force:
//	1. determine stress tensor
//	2. from this determine F_mu
//  	3. and then compile total force - iterate through to update velocity
//	   and redetermine stress to ensure more accurate F_total

<?R
	#C(new_g, g)
?>
for (j=0;j<2;j++) {
<?R
	C(m[selR], (m0 - EQ$Req)[selR] * Omega)

	stress = PV("stress[",1:6-1,"]");
	new_g = solve(M) %*% m
	C(stress[1], sum( U[,1]*U[,1] * new_g )); # XX
	C(stress[2], sum( U[,1]*U[,2] * new_g )); # XY
	C(stress[3], sum( U[,1]*U[,3] * new_g )); # XZ
	C(stress[4], sum( U[,2]*U[,2] * new_g )); # YY
	C(stress[5], sum( U[,2]*U[,3] * new_g )); # YZ
	C(stress[6], sum( U[,3]*U[,3] * new_g )); # ZZ
?>

	F_mu[0] = (0.5-tau) * (Density_h-Density_l) * (stress[0]*gradPhi.x + stress[1]*gradPhi.y + stress[2]*gradPhi.z);
	F_mu[1] = (0.5-tau) * (Density_h-Density_l) * (stress[1]*gradPhi.x + stress[3]*gradPhi.y + stress[4]*gradPhi.z);
	F_mu[2] = (0.5-tau) * (Density_h-Density_l) * (stress[2]*gradPhi.x + stress[4]*gradPhi.y + stress[5]*gradPhi.z);
	F_total.x = mu*gradPhi.x + F_pressure[0] + F_body[0] + F_mu[0];
	F_total.y = mu*gradPhi.y + F_pressure[1] + F_body[1] + F_mu[1];
	F_total.z = mu*gradPhi.z + F_pressure[2] + F_body[2] + F_mu[2];

#ifdef OPTIONS_filter
	F_total.x += Fa.x;
	F_total.y += Fa.y;
	F_total.z += Fa.z;
#endif

<?R 	C( u, m0[2:4] + 0.5 * F_total * rho.inv) ?>
}

u.x = U; u.y = V; u.z = W;
// PHASE FIELD POPULATION UPDATE:
	tmp1 = (1.0 - 4.0*(C - 0.5)*(C - 0.5))/IntWidth;
<?R
	C(heq, EQ_h$feq * PV("C"))
	n = PV("n",c("x","y","z"))
if (Options$RT) {
	u_old = PV(c("u_old[0]","u_old[1]","u_old[2]"))
	pf_old= PV("PhaseF_old")
	pf    = PV("PhaseF")
	C(Fphi, myWeighting * PV("tmp1") * (U %*% n) + 3.0 * U %*% (pf*u - pf_old*u_old) )
} else {
	C(Fphi, myWeighting * PV("tmp1") * (U %*% n))
}	
# 	SRT Relaxation for h
	C(h, h - omega * (h - heq + 0.5*Fphi) + Fphi)

#	MRT Relaxation for g
#	mF = PV(rep(0,27))
#	mF[2:4] = F_total * rho.inv

#	C(m, m0 - (m0 - EQ$Req + mF*0.5)[selR] * Omega + mF)
#	C(g, invM %*% m)
?>

	//=== THIS IS AUTOMATICALLY GENERATED CODE ===
	real_t uxuy = u.x*u.y;
	real_t ux2 = u.x*u.x;
	real_t uy2 = u.y*u.y;
	real_t uxuz = u.x*u.z;
	real_t uyuz = u.y*u.z;
	real_t uz2 = u.z*u.z;
	real_t omega_bulk = 1.0;
	real_t m000 = g000 + g001 + g002 + g010 + g011 + g012 + g020 + g021 + g022 + g100 + g101 + g102 + g110 + g111 + g112 + g120 + g121 + g122 + g200 + g201 + g202 + g210 + g211 + g212 + g220 + g221 + g222;
	real_t temp000 = g000;
	real_t temp100 = g100;
	real_t temp010 = g010;
	real_t temp001 = g001;
	real_t temp110 = g110;
	real_t temp101 = g101;
	real_t temp011 = g011;
	real_t temp200 = g200;
	real_t temp020 = g020;
	real_t temp002 = g002;
	real_t temp120 = g120;
	real_t temp102 = g102;
	real_t temp210 = g210;
	real_t temp201 = g201;
	real_t temp012 = g012;
	real_t temp021 = g021;
	real_t temp111 = g111;
	real_t temp220 = g220;
	real_t temp202 = g202;
	real_t temp022 = g022;
	real_t temp211 = g211;
	real_t temp121 = g121;
	real_t temp112 = g112;
	real_t temp122 = g122;
	real_t temp212 = g212;
	real_t temp221 = g221;
	real_t temp222 = g222;
	//raw moments from density-probability functions
	g000 = temp000 + temp001 + temp002 + temp010 + temp011 + temp012 + temp020 + temp021 + temp022 + temp100 + temp101 + temp102 + temp110 + temp111 + temp112 + temp120 + temp121 + temp122 + temp200 + temp201 + temp202 + temp210 + temp211 + temp212 + temp220 + temp221 + temp222;
	g100 = temp100 + temp101 + temp102 + temp110 + temp111 + temp112 + temp120 + temp121 + temp122 - temp200 - temp201 - temp202 - temp210 - temp211 - temp212 - temp220 - temp221 - temp222;
	g010 = temp010 + temp011 + temp012 - temp020 - temp021 - temp022 + temp110 + temp111 + temp112 - temp120 - temp121 - temp122 + temp210 + temp211 + temp212 - temp220 - temp221 - temp222;
	g001 = temp001 - temp002 + temp011 - temp012 + temp021 - temp022 + temp101 - temp102 + temp111 - temp112 + temp121 - temp122 + temp201 - temp202 + temp211 - temp212 + temp221 - temp222;
	g110 = temp110 + temp111 + temp112 - temp120 - temp121 - temp122 - temp210 - temp211 - temp212 + temp220 + temp221 + temp222;
	g101 = temp101 - temp102 + temp111 - temp112 + temp121 - temp122 - temp201 + temp202 - temp211 + temp212 - temp221 + temp222;
	g011 = temp011 - temp012 - temp021 + temp022 + temp111 - temp112 - temp121 + temp122 + temp211 - temp212 - temp221 + temp222;
	g200 = temp100 + temp101 + temp102 + temp110 + temp111 + temp112 + temp120 + temp121 + temp122 + temp200 + temp201 + temp202 + temp210 + temp211 + temp212 + temp220 + temp221 + temp222;
	g020 = temp010 + temp011 + temp012 + temp020 + temp021 + temp022 + temp110 + temp111 + temp112 + temp120 + temp121 + temp122 + temp210 + temp211 + temp212 + temp220 + temp221 + temp222;
	g002 = temp001 + temp002 + temp011 + temp012 + temp021 + temp022 + temp101 + temp102 + temp111 + temp112 + temp121 + temp122 + temp201 + temp202 + temp211 + temp212 + temp221 + temp222;
	g120 = temp110 + temp111 + temp112 + temp120 + temp121 + temp122 - temp210 - temp211 - temp212 - temp220 - temp221 - temp222;
	g102 = temp101 + temp102 + temp111 + temp112 + temp121 + temp122 - temp201 - temp202 - temp211 - temp212 - temp221 - temp222;
	g210 = temp110 + temp111 + temp112 - temp120 - temp121 - temp122 + temp210 + temp211 + temp212 - temp220 - temp221 - temp222;
	g201 = temp101 - temp102 + temp111 - temp112 + temp121 - temp122 + temp201 - temp202 + temp211 - temp212 + temp221 - temp222;
	g012 = temp011 + temp012 - temp021 - temp022 + temp111 + temp112 - temp121 - temp122 + temp211 + temp212 - temp221 - temp222;
	g021 = temp011 - temp012 + temp021 - temp022 + temp111 - temp112 + temp121 - temp122 + temp211 - temp212 + temp221 - temp222;
	g111 = temp111 - temp112 - temp121 + temp122 - temp211 + temp212 + temp221 - temp222;
	g220 = temp110 + temp111 + temp112 + temp120 + temp121 + temp122 + temp210 + temp211 + temp212 + temp220 + temp221 + temp222;
	g202 = temp101 + temp102 + temp111 + temp112 + temp121 + temp122 + temp201 + temp202 + temp211 + temp212 + temp221 + temp222;
	g022 = temp011 + temp012 + temp021 + temp022 + temp111 + temp112 + temp121 + temp122 + temp211 + temp212 + temp221 + temp222;
	g211 = temp111 - temp112 - temp121 + temp122 + temp211 - temp212 - temp221 + temp222;
	g121 = temp111 - temp112 + temp121 - temp122 - temp211 + temp212 - temp221 + temp222;
	g112 = temp111 + temp112 - temp121 - temp122 - temp211 - temp212 + temp221 + temp222;
	g122 = temp111 + temp112 + temp121 + temp122 - temp211 - temp212 - temp221 - temp222;
	g212 = temp111 + temp112 - temp121 - temp122 + temp211 + temp212 - temp221 - temp222;
	g221 = temp111 - temp112 + temp121 - temp122 + temp211 - temp212 + temp221 - temp222;
	g222 = temp111 + temp112 + temp121 + temp122 + temp211 + temp212 + temp221 + temp222;
	//central moments from raw moments
	temp000 = g000;
	temp100 = -g000*u.x + g100;
	temp010 = -g000*u.y + g010;
	temp001 = -g000*u.z + g001;
	temp110 = g000*uxuy - g010*u.x - g100*u.y + g110;
	temp101 = g000*uxuz - g001*u.x - g100*u.z + g101;
	temp011 = g000*uyuz - g001*u.y - g010*u.z + g011;
	temp200 = g000*ux2 - 2.*g100*u.x + g200;
	temp020 = g000*uy2 - 2.*g010*u.y + g020;
	temp002 = g000*uz2 - 2.*g001*u.z + g002;
	temp120 = -g000*u.x*uy2 + 2.*g010*uxuy - g020*u.x + g100*uy2 - 2.*g110*u.y + g120;
	temp102 = -g000*u.x*uz2 + 2.*g001*uxuz - g002*u.x + g100*uz2 - 2.*g101*u.z + g102;
	temp210 = -g000*ux2*u.y + g010*ux2 + 2.*g100*uxuy - 2.*g110*u.x - g200*u.y + g210;
	temp201 = -g000*ux2*u.z + g001*ux2 + 2.*g100*uxuz - 2.*g101*u.x - g200*u.z + g201;
	temp012 = -g000*u.y*uz2 + 2.*g001*uyuz - g002*u.y + g010*uz2 - 2.*g011*u.z + g012;
	temp021 = -g000*uy2*u.z + g001*uy2 + 2.*g010*uyuz - 2.*g011*u.y - g020*u.z + g021;
	temp111 = -g000*uxuy*u.z + g001*uxuy + g010*uxuz - g011*u.x + g100*uyuz - g101*u.y - g110*u.z + g111;
	temp220 = g000*ux2*uy2 - 2.*g010*ux2*u.y + g020*ux2 - 2.*g100*u.x*uy2 + 4.*g110*uxuy - 2.*g120*u.x + g200*uy2 - 2.*g210*u.y + g220;
	temp202 = g000*ux2*uz2 - 2.*g001*ux2*u.z + g002*ux2 - 2.*g100*u.x*uz2 + 4.*g101*uxuz - 2.*g102*u.x + g200*uz2 - 2.*g201*u.z + g202;
	temp022 = g000*uy2*uz2 - 2.*g001*uy2*u.z + g002*uy2 - 2.*g010*u.y*uz2 + 4.*g011*uyuz - 2.*g012*u.y + g020*uz2 - 2.*g021*u.z + g022;
	temp211 = g000*ux2*uyuz - g001*ux2*u.y - g010*ux2*u.z + g011*ux2 - 2.*g100*uxuy*u.z + 2.*g101*uxuy + 2.*g110*uxuz - 2.*g111*u.x + g200*uyuz - g201*u.y - g210*u.z + g211;
	temp121 = g000*u.x*uy2*u.z - g001*u.x*uy2 - 2.*g010*uxuy*u.z + 2.*g011*uxuy + g020*uxuz - g021*u.x - g100*uy2*u.z + g101*uy2 + 2.*g110*uyuz - 2.*g111*u.y - g120*u.z + g121;
	temp112 = g000*uxuy*uz2 - 2.*g001*uxuy*u.z + g002*uxuy - g010*u.x*uz2 + 2.*g011*uxuz - g012*u.x - g100*u.y*uz2 + 2.*g101*uyuz - g102*u.y + g110*uz2 - 2.*g111*u.z + g112;
	temp122 = -g000*u.x*uy2*uz2 + 2.*g001*u.x*uy2*u.z - g002*u.x*uy2 + 2.*g010*uxuy*uz2 - 4.*g011*uxuy*u.z + 2.*g012*uxuy - g020*u.x*uz2 + 2.*g021*uxuz - g022*u.x + g100*uy2*uz2 - 2.*g101*uy2*u.z + g102*uy2 - 2.*g110*u.y*uz2 + 4.*g111*uyuz - 2.*g112*u.y + g120*uz2 - 2.*g121*u.z + g122;
	temp212 = -g000*ux2*u.y*uz2 + 2.*g001*ux2*uyuz - g002*ux2*u.y + g010*ux2*uz2 - 2.*g011*ux2*u.z + g012*ux2 + 2.*g100*uxuy*uz2 - 4.*g101*uxuy*u.z + 2.*g102*uxuy - 2.*g110*u.x*uz2 + 4.*g111*uxuz - 2.*g112*u.x - g200*u.y*uz2 + 2.*g201*uyuz - g202*u.y + g210*uz2 - 2.*g211*u.z + g212;
	temp221 = -g000*ux2*uy2*u.z + g001*ux2*uy2 + 2.*g010*ux2*uyuz - 2.*g011*ux2*u.y - g020*ux2*u.z + g021*ux2 + 2.*g100*u.x*uy2*u.z - 2.*g101*u.x*uy2 - 4.*g110*uxuy*u.z + 4.*g111*uxuy + 2.*g120*uxuz - 2.*g121*u.x - g200*uy2*u.z + g201*uy2 + 2.*g210*uyuz - 2.*g211*u.y - g220*u.z + g221;
	temp222 = g000*ux2*uy2*uz2 - 2.*g001*ux2*uy2*u.z + g002*ux2*uy2 - 2.*g010*ux2*u.y*uz2 + 4.*g011*ux2*uyuz - 2.*g012*ux2*u.y + g020*ux2*uz2 - 2.*g021*ux2*u.z + g022*ux2 - 2.*g100*u.x*uy2*uz2 + 4.*g101*u.x*uy2*u.z - 2.*g102*u.x*uy2 + 4.*g110*uxuy*uz2 - 8.*g111*uxuy*u.z + 4.*g112*uxuy - 2.*g120*u.x*uz2 + 4.*g121*uxuz - 2.*g122*u.x + g200*uy2*uz2 - 2.*g201*uy2*u.z + g202*uy2 - 2.*g210*u.y*uz2 + 4.*g211*uyuz - 2.*g212*u.y + g220*uz2 - 2.*g221*u.z + g222;
	//collision in central moments space
	//collide
	g000 = m000;
	g100 = 1/2.*F_total.x/rho - m000*u.x + u.x;
	g010 = 1/2.*F_total.y/rho - m000*u.y + u.y;
	g001 = 1/2.*F_total.z/rho - m000*u.z + u.z;
	g110 = omega_nu*uxuy*(m000 - 1.) - temp110*(omega_nu - 1.);
	g101 = omega_nu*uxuz*(m000 - 1.) - temp101*(omega_nu - 1.);
	g011 = omega_nu*uyuz*(m000 - 1.) - temp011*(omega_nu - 1.);
	g200 = -1/3.*temp002*(omega_bulk - omega_nu) - 1/3.*temp020*(omega_bulk - omega_nu) - 1/3.*temp200*(omega_bulk + 2.*omega_nu - 3.) + 1/3.*(omega_bulk - omega_nu)*(m000*uy2 + 1/3.*m000 - uy2) + 1/3.*(omega_bulk - omega_nu)*(m000*uz2 + 1/3.*m000 - uz2) + 1/3.*(omega_bulk + 2.*omega_nu)*(m000*ux2 + 1/3.*m000 - ux2);
	g020 = -1/3.*temp002*(omega_bulk - omega_nu) - 1/3.*temp020*(omega_bulk + 2.*omega_nu - 3.) - 1/3.*temp200*(omega_bulk - omega_nu) + 1/3.*(omega_bulk - omega_nu)*(m000*ux2 + 1/3.*m000 - ux2) + 1/3.*(omega_bulk - omega_nu)*(m000*uz2 + 1/3.*m000 - uz2) + 1/3.*(omega_bulk + 2.*omega_nu)*(m000*uy2 + 1/3.*m000 - uy2);
	g002 = -1/3.*temp002*(omega_bulk + 2.*omega_nu - 3.) - 1/3.*temp020*(omega_bulk - omega_nu) - 1/3.*temp200*(omega_bulk - omega_nu) + 1/3.*(omega_bulk - omega_nu)*(m000*ux2 + 1/3.*m000 - ux2) + 1/3.*(omega_bulk - omega_nu)*(m000*uy2 + 1/3.*m000 - uy2) + 1/3.*(omega_bulk + 2.*omega_nu)*(m000*uz2 + 1/3.*m000 - uz2);
	g120 = (1/6.*F_total.x - rho*u.x*(m000*uy2 + 1/3.*m000 - uy2 - 1/3.))/rho;
	g102 = (1/6.*F_total.x - rho*u.x*(m000*uz2 + 1/3.*m000 - uz2 - 1/3.))/rho;
	g210 = (1/6.*F_total.y - rho*u.y*(m000*ux2 + 1/3.*m000 - ux2 - 1/3.))/rho;
	g201 = (1/6.*F_total.z - rho*u.z*(m000*ux2 + 1/3.*m000 - ux2 - 1/3.))/rho;
	g012 = (1/6.*F_total.y - rho*u.y*(m000*uz2 + 1/3.*m000 - uz2 - 1/3.))/rho;
	g021 = (1/6.*F_total.z - rho*u.z*(m000*uy2 + 1/3.*m000 - uy2 - 1/3.))/rho;
	g111 = -u.z*uxuy*(m000 - 1.);
	g220 = m000*ux2*uy2 + 1/3.*m000*ux2 + 1/3.*m000*uy2 + 1/9.*m000 - ux2*uy2 - 1/3.*ux2 - 1/3.*uy2;
	g202 = m000*ux2*uz2 + 1/3.*m000*ux2 + 1/3.*m000*uz2 + 1/9.*m000 - ux2*uz2 - 1/3.*ux2 - 1/3.*uz2;
	g022 = m000*uy2*uz2 + 1/3.*m000*uy2 + 1/3.*m000*uz2 + 1/9.*m000 - uy2*uz2 - 1/3.*uy2 - 1/3.*uz2;
	g211 = uyuz*(m000*ux2 + 1/3.*m000 - ux2 - 1/3.);
	g121 = uxuz*(m000*uy2 + 1/3.*m000 - uy2 - 1/3.);
	g112 = uxuy*(m000*uz2 + 1/3.*m000 - uz2 - 1/3.);
	g122 = (1/18.*F_total.x - rho*u.x*(m000*uy2*uz2 + 1/3.*m000*uy2 + 1/3.*m000*uz2 + 1/9.*m000 - uy2*uz2 - 1/3.*uy2 - 1/3.*uz2 - 1/9.))/rho;
	g212 = (1/18.*F_total.y - rho*u.y*(m000*ux2*uz2 + 1/3.*m000*ux2 + 1/3.*m000*uz2 + 1/9.*m000 - ux2*uz2 - 1/3.*ux2 - 1/3.*uz2 - 1/9.))/rho;
	g221 = (1/18.*F_total.z - rho*u.z*(m000*ux2*uy2 + 1/3.*m000*ux2 + 1/3.*m000*uy2 + 1/9.*m000 - ux2*uy2 - 1/3.*ux2 - 1/3.*uy2 - 1/9.))/rho;
	g222 = m000*ux2*uy2*uz2 + 1/3.*m000*ux2*uy2 + 1/3.*m000*ux2*uz2 + 1/9.*m000*ux2 + 1/3.*m000*uy2*uz2 + 1/9.*m000*uy2 + 1/9.*m000*uz2 + 1/27.*m000 - ux2*uy2*uz2 - 1/3.*ux2*uy2 - 1/3.*ux2*uz2 - 1/9.*ux2 - 1/3.*uy2*uz2 - 1/9.*uy2 - 1/9.*uz2;
	//back to raw moments
	temp000 = g000;
	temp100 = g000*u.x + g100;
	temp010 = g000*u.y + g010;
	temp001 = g000*u.z + g001;
	temp110 = g000*uxuy + g010*u.x + g100*u.y + g110;
	temp101 = g000*uxuz + g001*u.x + g100*u.z + g101;
	temp011 = g000*uyuz + g001*u.y + g010*u.z + g011;
	temp200 = g000*ux2 + 2.*g100*u.x + g200;
	temp020 = g000*uy2 + 2.*g010*u.y + g020;
	temp002 = g000*uz2 + 2.*g001*u.z + g002;
	temp120 = g000*u.x*uy2 + 2.*g010*uxuy + g020*u.x + g100*uy2 + 2.*g110*u.y + g120;
	temp102 = g000*u.x*uz2 + 2.*g001*uxuz + g002*u.x + g100*uz2 + 2.*g101*u.z + g102;
	temp210 = g000*ux2*u.y + g010*ux2 + 2.*g100*uxuy + 2.*g110*u.x + g200*u.y + g210;
	temp201 = g000*ux2*u.z + g001*ux2 + 2.*g100*uxuz + 2.*g101*u.x + g200*u.z + g201;
	temp012 = g000*u.y*uz2 + 2.*g001*uyuz + g002*u.y + g010*uz2 + 2.*g011*u.z + g012;
	temp021 = g000*uy2*u.z + g001*uy2 + 2.*g010*uyuz + 2.*g011*u.y + g020*u.z + g021;
	temp111 = g000*uxuy*u.z + g001*uxuy + g010*uxuz + g011*u.x + g100*uyuz + g101*u.y + g110*u.z + g111;
	temp220 = g000*ux2*uy2 + 2.*g010*ux2*u.y + g020*ux2 + 2.*g100*u.x*uy2 + 4.*g110*uxuy + 2.*g120*u.x + g200*uy2 + 2.*g210*u.y + g220;
	temp202 = g000*ux2*uz2 + 2.*g001*ux2*u.z + g002*ux2 + 2.*g100*u.x*uz2 + 4.*g101*uxuz + 2.*g102*u.x + g200*uz2 + 2.*g201*u.z + g202;
	temp022 = g000*uy2*uz2 + 2.*g001*uy2*u.z + g002*uy2 + 2.*g010*u.y*uz2 + 4.*g011*uyuz + 2.*g012*u.y + g020*uz2 + 2.*g021*u.z + g022;
	temp211 = g000*ux2*uyuz + g001*ux2*u.y + g010*ux2*u.z + g011*ux2 + 2.*g100*uxuy*u.z + 2.*g101*uxuy + 2.*g110*uxuz + 2.*g111*u.x + g200*uyuz + g201*u.y + g210*u.z + g211;
	temp121 = g000*u.x*uy2*u.z + g001*u.x*uy2 + 2.*g010*uxuy*u.z + 2.*g011*uxuy + g020*uxuz + g021*u.x + g100*uy2*u.z + g101*uy2 + 2.*g110*uyuz + 2.*g111*u.y + g120*u.z + g121;
	temp112 = g000*uxuy*uz2 + 2.*g001*uxuy*u.z + g002*uxuy + g010*u.x*uz2 + 2.*g011*uxuz + g012*u.x + g100*u.y*uz2 + 2.*g101*uyuz + g102*u.y + g110*uz2 + 2.*g111*u.z + g112;
	temp122 = g000*u.x*uy2*uz2 + 2.*g001*u.x*uy2*u.z + g002*u.x*uy2 + 2.*g010*uxuy*uz2 + 4.*g011*uxuy*u.z + 2.*g012*uxuy + g020*u.x*uz2 + 2.*g021*uxuz + g022*u.x + g100*uy2*uz2 + 2.*g101*uy2*u.z + g102*uy2 + 2.*g110*u.y*uz2 + 4.*g111*uyuz + 2.*g112*u.y + g120*uz2 + 2.*g121*u.z + g122;
	temp212 = g000*ux2*u.y*uz2 + 2.*g001*ux2*uyuz + g002*ux2*u.y + g010*ux2*uz2 + 2.*g011*ux2*u.z + g012*ux2 + 2.*g100*uxuy*uz2 + 4.*g101*uxuy*u.z + 2.*g102*uxuy + 2.*g110*u.x*uz2 + 4.*g111*uxuz + 2.*g112*u.x + g200*u.y*uz2 + 2.*g201*uyuz + g202*u.y + g210*uz2 + 2.*g211*u.z + g212;
	temp221 = g000*ux2*uy2*u.z + g001*ux2*uy2 + 2.*g010*ux2*uyuz + 2.*g011*ux2*u.y + g020*ux2*u.z + g021*ux2 + 2.*g100*u.x*uy2*u.z + 2.*g101*u.x*uy2 + 4.*g110*uxuy*u.z + 4.*g111*uxuy + 2.*g120*uxuz + 2.*g121*u.x + g200*uy2*u.z + g201*uy2 + 2.*g210*uyuz + 2.*g211*u.y + g220*u.z + g221;
	temp222 = g000*ux2*uy2*uz2 + 2.*g001*ux2*uy2*u.z + g002*ux2*uy2 + 2.*g010*ux2*u.y*uz2 + 4.*g011*ux2*uyuz + 2.*g012*ux2*u.y + g020*ux2*uz2 + 2.*g021*ux2*u.z + g022*ux2 + 2.*g100*u.x*uy2*uz2 + 4.*g101*u.x*uy2*u.z + 2.*g102*u.x*uy2 + 4.*g110*uxuy*uz2 + 8.*g111*uxuy*u.z + 4.*g112*uxuy + 2.*g120*u.x*uz2 + 4.*g121*uxuz + 2.*g122*u.x + g200*uy2*uz2 + 2.*g201*uy2*u.z + g202*uy2 + 2.*g210*u.y*uz2 + 4.*g211*uyuz + 2.*g212*u.y + g220*uz2 + 2.*g221*u.z + g222;
	//back to density-probability functions
	g000 = temp000 - temp002 - temp020 + temp022 - temp200 + temp202 + temp220 - temp222;
	g100 = 1/2.*temp100 - 1/2.*temp102 - 1/2.*temp120 + 1/2.*temp122 + 1/2.*temp200 - 1/2.*temp202 - 1/2.*temp220 + 1/2.*temp222;
	g200 = -1/2.*temp100 + 1/2.*temp102 + 1/2.*temp120 - 1/2.*temp122 + 1/2.*temp200 - 1/2.*temp202 - 1/2.*temp220 + 1/2.*temp222;
	g010 = 1/2.*temp010 - 1/2.*temp012 + 1/2.*temp020 - 1/2.*temp022 - 1/2.*temp210 + 1/2.*temp212 - 1/2.*temp220 + 1/2.*temp222;
	g110 = 1/4.*temp110 - 1/4.*temp112 + 1/4.*temp120 - 1/4.*temp122 + 1/4.*temp210 - 1/4.*temp212 + 1/4.*temp220 - 1/4.*temp222;
	g210 = -1/4.*temp110 + 1/4.*temp112 - 1/4.*temp120 + 1/4.*temp122 + 1/4.*temp210 - 1/4.*temp212 + 1/4.*temp220 - 1/4.*temp222;
	g020 = -1/2.*temp010 + 1/2.*temp012 + 1/2.*temp020 - 1/2.*temp022 + 1/2.*temp210 - 1/2.*temp212 - 1/2.*temp220 + 1/2.*temp222;
	g120 = -1/4.*temp110 + 1/4.*temp112 + 1/4.*temp120 - 1/4.*temp122 - 1/4.*temp210 + 1/4.*temp212 + 1/4.*temp220 - 1/4.*temp222;
	g220 = 1/4.*temp110 - 1/4.*temp112 - 1/4.*temp120 + 1/4.*temp122 - 1/4.*temp210 + 1/4.*temp212 + 1/4.*temp220 - 1/4.*temp222;
	g001 = 1/2.*temp001 + 1/2.*temp002 - 1/2.*temp021 - 1/2.*temp022 - 1/2.*temp201 - 1/2.*temp202 + 1/2.*temp221 + 1/2.*temp222;
	g101 = 1/4.*temp101 + 1/4.*temp102 - 1/4.*temp121 - 1/4.*temp122 + 1/4.*temp201 + 1/4.*temp202 - 1/4.*temp221 - 1/4.*temp222;
	g201 = -1/4.*temp101 - 1/4.*temp102 + 1/4.*temp121 + 1/4.*temp122 + 1/4.*temp201 + 1/4.*temp202 - 1/4.*temp221 - 1/4.*temp222;
	g011 = 1/4.*temp011 + 1/4.*temp012 + 1/4.*temp021 + 1/4.*temp022 - 1/4.*temp211 - 1/4.*temp212 - 1/4.*temp221 - 1/4.*temp222;
	g111 = 1/8.*temp111 + 1/8.*temp112 + 1/8.*temp121 + 1/8.*temp122 + 1/8.*temp211 + 1/8.*temp212 + 1/8.*temp221 + 1/8.*temp222;
	g211 = -1/8.*temp111 - 1/8.*temp112 - 1/8.*temp121 - 1/8.*temp122 + 1/8.*temp211 + 1/8.*temp212 + 1/8.*temp221 + 1/8.*temp222;
	g021 = -1/4.*temp011 - 1/4.*temp012 + 1/4.*temp021 + 1/4.*temp022 + 1/4.*temp211 + 1/4.*temp212 - 1/4.*temp221 - 1/4.*temp222;
	g121 = -1/8.*temp111 - 1/8.*temp112 + 1/8.*temp121 + 1/8.*temp122 - 1/8.*temp211 - 1/8.*temp212 + 1/8.*temp221 + 1/8.*temp222;
	g221 = 1/8.*temp111 + 1/8.*temp112 - 1/8.*temp121 - 1/8.*temp122 - 1/8.*temp211 - 1/8.*temp212 + 1/8.*temp221 + 1/8.*temp222;
	g002 = -1/2.*temp001 + 1/2.*temp002 + 1/2.*temp021 - 1/2.*temp022 + 1/2.*temp201 - 1/2.*temp202 - 1/2.*temp221 + 1/2.*temp222;
	g102 = -1/4.*temp101 + 1/4.*temp102 + 1/4.*temp121 - 1/4.*temp122 - 1/4.*temp201 + 1/4.*temp202 + 1/4.*temp221 - 1/4.*temp222;
	g202 = 1/4.*temp101 - 1/4.*temp102 - 1/4.*temp121 + 1/4.*temp122 - 1/4.*temp201 + 1/4.*temp202 + 1/4.*temp221 - 1/4.*temp222;
	g012 = -1/4.*temp011 + 1/4.*temp012 - 1/4.*temp021 + 1/4.*temp022 + 1/4.*temp211 - 1/4.*temp212 + 1/4.*temp221 - 1/4.*temp222;
	g112 = -1/8.*temp111 + 1/8.*temp112 - 1/8.*temp121 + 1/8.*temp122 - 1/8.*temp211 + 1/8.*temp212 - 1/8.*temp221 + 1/8.*temp222;
	g212 = 1/8.*temp111 - 1/8.*temp112 + 1/8.*temp121 - 1/8.*temp122 - 1/8.*temp211 + 1/8.*temp212 - 1/8.*temp221 + 1/8.*temp222;
	g022 = 1/4.*temp011 - 1/4.*temp012 - 1/4.*temp021 + 1/4.*temp022 - 1/4.*temp211 + 1/4.*temp212 + 1/4.*temp221 - 1/4.*temp222;
	g122 = 1/8.*temp111 - 1/8.*temp112 - 1/8.*temp121 + 1/8.*temp122 + 1/8.*temp211 - 1/8.*temp212 - 1/8.*temp221 + 1/8.*temp222;
	g222 = -1/8.*temp111 + 1/8.*temp112 + 1/8.*temp121 - 1/8.*temp122 + 1/8.*temp211 - 1/8.*temp212 - 1/8.*temp221 + 1/8.*temp222;

	global_trackers( C );
}
#endif


CudaDeviceFunction void global_trackers( real_t C ){
// Locate the front of the bubble
real_t location_X;
if (C < 0.5 && PhaseF(1,0,0) > 0.5)
{
	location_X = X + (C-0.5)/(C-PhaseF(1,0,0));
	AddToBubbleFront( location_X );
}
// 09.09.2019 - Comment out of unnecessary globals
/*	switch (NodeType & NODE_ADDITIONALS) {
		real_t location;
		case NODE_Edgeline:
		    if ( fabs(xyzTrack-1) < 1e-3 )
		    {  // track along X
			if (C >0.5 && PhaseF(1,0,0) < 0.5)
			{
				location = X + (C-0.5)/(C-PhaseF(1,0,0));
				AddToInterfacePositionOne(location);
				AddToVfront(U);
			}
		    } else if ( fabs(xyzTrack-2) < 1e-3)
		    {  // track along Y 	
			if (C >0.5 && PhaseF(0,1,0) < 0.5)
			{
				location = Y + (C-0.5)/(C-PhaseF(0,1,0));
				AddToInterfacePositionOne(location);
				AddToVfront(V);
			}
		    } else if ( fabs(xyzTrack-3) < 1e-3)
		    { // track along Z
			if (C >0.5 && PhaseF(0,0,1) < 0.5)
			{
				location = Z + (C-0.5)/(C-PhaseF(0,0,1));
				AddToInterfacePositionOne(location);
				AddToVfront(W);
			}
		    }

		case NODE_Centerline:
		    if ( fabs(xyzTrack-1) < 1e-3 )
		    {  // track along X
		/*	if (C < 0.5 && PhaseF(1,0,0) > 0.5)
			{
				location = X + (C-0.5)/(C-PhaseF(1,0,0));
				AddToInterfacePositionOne(location);
				AddToVback(U);
			}* /
			if (C >0.5 && PhaseF(1,0,0) < 0.5)
			{
				location = X + (C-0.5)/(C-PhaseF(1,0,0));
				AddToInterfacePositionTwo(location);
				AddToVfront(U);
			}
		    } else if ( fabs(xyzTrack-2) < 1e-3)
		    { // track along Y
		/*	if (C < 0.5 && PhaseF(0,1,0) > 0.5)
			{
				location = Y + (C-0.5)/(C-PhaseF(0,1,0));
				AddToInterfacePositionOne(location);
				AddToVback(V);
			}* /
			if (C >0.5 && PhaseF(0,1,0) < 0.5)
			{
				location = Y + (C-0.5)/(C-PhaseF(0,1,0));
				AddToInterfacePositionTwo(location);
				AddToVfront(V);
			}
		    } else if ( fabs(xyzTrack-3) < 1e-3)
		    { // track along Z
		/*	if (C < 0.5 && PhaseF(0,0,1) > 0.5)
			{
				location = Z + (C-0.5)/(C-PhaseF(0,0,1));
				AddToInterfacePositionOne(location);
				AddToVback(W);
			}* /
			if (C >0.5 && PhaseF(0,0,1) < 0.5)
			{
				location = Z + (C-0.5)/(C-PhaseF(0,0,1));
				AddToInterfacePositionTwo(location);
				AddToVfront(W);
			}
		    }
		case NODE_Spiketrack:
			if (C < 0.5 && PhaseF(0,1,0) > 0.5)
			{
				location = Y + (C-0.5)/(C-PhaseF(0,1,0));
				AddToRTISpike(location);
			}
		case NODE_Saddletrack:
			if (C < 0.5 && PhaseF(0,1,0) > 0.5)
			{
				location = Y + (C-0.5)/(C-PhaseF(0,1,0));
				AddToRTISaddle(location);
			}
		case NODE_Bubbletrack:
			if (C < 0.5 && PhaseF(0,1,0) > 0.5)
			{
				location = Y + (C-0.5)/(C-PhaseF(0,1,0));
				AddToRTIBubble(location);
			}
	}*/

}

//	BOUNDARY CONDITIONS:
#ifdef OPTIONS_OutFlow
#define myMax(a,b) \
   ({ __typeof__ (a) _a = (a); \
       __typeof__ (b) _b = (b); \
     _a > _b ? _a : _b; })

CudaDeviceFunction void EConvect()
{
	real_t U_local = myMax(0, U(-1,0,0));
	real_t invU = 1.0/(1+ U_local);
<?R
	if (Options$OutFlow) {
		C(g, (g_old + U_loc*g_n)*U_inv)
		C(h, (h_old + U_loc*h_n)*U_inv)
		
		C(g_old, g)
		C(h_old, h)
	}
?>
}

CudaDeviceFunction void ENeumann()
{
<?R
	if (Options$OutFlow){
		C(g, PV(paste0(g_neighbours,"(",-Density$dx[Density$group=="g"]-1,",",-Density$dy[Density$group=="g"],",",-Density$dz[Density$group=="g"],")")))	
		C(h, PV(paste0(h_neighbours,"(",-Density$dx[Density$group=="h"]-1,",",-Density$dy[Density$group=="h"],",",-Density$dz[Density$group=="h"],")")))	
	}
?>
}
#endif

CudaDeviceFunction void WVelocity()
{
	U = VelocityX;
	V = VelocityY;
	W = VelocityZ;
<?R
	n = c(-1,0,0)
        geq = EQ$feq
        bounce = Bounce(U)
        sel = as.vector( (U %*% n) < 0)

	sel2 = as.vector( ( U %*% n) == 0)	
	exM = (g[sel2] - geq[sel2]) %*% U[sel2,]
	Unknowns = 1.0/9.0

	C(g[sel], g[bounce][sel] + (geq[sel] - geq[bounce][sel]) - Unknowns * (exM %*% t(U))[sel])
?>


	{
		<?R ZouHeRewrite(EQ_h, h, c(-1,0,0),"pressure", rhs=PV("PhaseField")) ?>
	}
}

CudaDeviceFunction void EVelocity()
{
	U = VelocityX;
	V = VelocityY;
	W = VelocityZ;
<?R
	n = c(1,0,0)
        geq = EQ$feq
        bounce = Bounce(U)
        sel = as.vector( (U %*% n) < 0)

	sel2 = as.vector( ( U %*% n) == 0)	
	exM = (g[sel2] - geq[sel2]) %*% U[sel2,]
	Unknowns = 1.0/9.0

	C(g[sel], g[bounce][sel] + (geq[sel] - geq[bounce][sel]) - Unknowns * (exM %*% t(U))[sel])
?>
	{
		<?R ZouHeRewrite(EQ_h, h, c(1,0,0),"pressure", rhs=PV("PhaseField")) ?>
	}
}

CudaDeviceFunction void NVelocity()
{
	U = VelocityX;
	V = VelocityY;
	W = VelocityZ;
<?R
	n = c(0,0,-1)
        geq = EQ$feq
        bounce = Bounce(U)
        sel = as.vector( (U %*% n) < 0)

	sel2 = as.vector( ( U %*% n) == 0)	
	exM = (g[sel2] - geq[sel2]) %*% U[sel2,]
	Unknowns = 1.0/9.0

	C(g[sel], g[bounce][sel] + (geq[sel] - geq[bounce][sel]) - Unknowns * (exM %*% t(U))[sel])
?>
	{
		<?R ZouHeRewrite(EQ_h, h, c(0,0,-1),"pressure", rhs=PV("PhaseField")) ?>
	}
}

CudaDeviceFunction void WPressure()
{
	{
		<?R ZouHeRewrite(EQ, g, c(-1,0,0),"pressure")  ?>
	}
	{
		<?R ZouHeRewrite(EQ_h, h, c(-1,0,0),"pressure", rhs=PV("PhaseField")) ?>
	}
}

CudaDeviceFunction void EPressure()
{
	{
		<?R ZouHeRewrite(EQ, g, c(1,0,0),"pressure")  ?>
	}
	{
		<?R ZouHeRewrite(EQ_h, h, c(1,0,0),"pressure", rhs=PV("PhaseField")) ?>
	}
}

CudaDeviceFunction void MovingNWall()
{
/*	g4  = g3;
	g24 = g25;
	g26 = g23;

	g9  = g12 + VelocityX/36.0;
	g13 = g8  + VelocityX/36.0;
	g17 = g16 + VelocityX/9.0;

	g10 = g11 - VelocityX/36.0;
	g14 = g7  - VelocityX/36.0;
	g18 = g15 - VelocityX/9.0;

	h4  = h3 ;
	h9  = h12;
	h10 = h11;
	h13 = h8 ;
	h14 = h7 ;
*/
}

CudaDeviceFunction void MovingSWall(){
/*	g3  = g4;
	g25 = g24;
	g23 = g26;

	g12 = g9  - VelocityX/36.0;
	g8  = g13 - VelocityX/36.0;
	g16 = g17 - VelocityX/9.0;

	g11 = g10 + VelocityX/36.0;
	g7  = g14 + VelocityX/36.0;
	g15 = g18 + VelocityX/9.0;

	h3  = h4 ;
	h12 = h9 ;
	h11 = h10;
	h8  = h13 ;
	h7  = h14 ;
*/
}

CudaDeviceFunction void BounceBack()
{
{<?R FullBounceBack(group='g') ?>}
{<?R FullBounceBack(group='h') ?>}
}

CudaDeviceFunction vector_t getA(){
	vector_t ret;
	return ret;
}
CudaDeviceFunction float2 Color() {
        float2 ret;
        vector_t u = getU();
        ret.x = PhaseF(0,0);
        if (NodeType == NODE_Solid){
                ret.y = 0;
        } else {
                ret.y = 1;
        }
        return ret;
}

#ifdef OPTIONS_BGK
CudaDeviceFunction void CollisionBGK(){
	int i, j;
	real_t C = PhaseF(0,0,0), mu;
	real_t tau, DynVisc, rho, p;			// Macroscopic Properties
	vector_t gradPhi;				// Phase field gradients
	real_t nx, ny, nz, magnPhi;			// Normals
	real_t Gamma[27], geq[27], mag;			// equilibrium, pressure equilibrium, velocity magnitude
	real_t F_pressure[3], F_body[3], F_mu[3], F_total[3]; // Forces
	real_t tmp1, stress[6]={0.0,0.0,0.0,0.0,0.0,0.0};     // Stress tensor calculation
	real_t F_phi[27], heq[27];			// Phase field collision terms
	real_t F_i[27];					// Momentum distribution forcing term
	real_t my_ex[27] = {<?R cat(U[,1],sep=",") ?>} ;
	real_t my_ey[27] = {<?R cat(U[,2],sep=",") ?>} ;
	real_t my_ez[27] = {<?R cat(U[,3],sep=",") ?>} ;

// Find Macroscopic Details
	mu = calcMu( C );
	rho = Density_l + (C - PhaseField_l)*(Density_h - Density_l)/(PhaseField_h - PhaseField_l);
	p = <?R C(sum(g)) ?>;

// Update tau:
	if ( C < PhaseField_l){
		tau = tau_l + 0.5;
	} else if (C > PhaseField_h) {
		tau = tau_h + 0.5;
	} else {
		tau = 0.5 + tau_l + (C-PhaseField_l)*(tau_h - tau_l)/(PhaseField_h - PhaseField_l);
	}

// GRADIENTS AND NORMALS
	gradPhi = calcGradPhi();
	magnPhi = sqrt(gradPhi.x*gradPhi.x + gradPhi.y*gradPhi.y + gradPhi.z*gradPhi.z + 1e-32);
	nx = gradPhi.x/magnPhi;
	ny = gradPhi.y/magnPhi;
	nz = gradPhi.z/magnPhi;

// CALCULATE FORCES:
	F_pressure[0] = (-1.0/3.0) * p * (Density_h-Density_l) * gradPhi.x;
	F_pressure[1] = (-1.0/3.0) * p * (Density_h-Density_l) * gradPhi.y;
	F_pressure[2] = (-1.0/3.0) * p * (Density_h-Density_l) * gradPhi.z;
	F_body[0] = (Density_h-rho)*BuoyancyX + rho*GravitationX;
	F_body[1] = (Density_h-rho)*BuoyancyY + rho*GravitationY;
	F_body[2] = (Density_h-rho)*BuoyancyZ + rho*GravitationZ;

// VISCOUS FORCE:
for (j=0;j<2;j++) {
// GAMMA AND EQUILIBRIUM
	mag = U*U + V*V + W*W;
	<?R 
		C(gamma, EQ$feq) 
		p = PV("p")
		C(geq, myWeighting * p + gamma - myWeighting)
 		C( geq, g - geq ) 
	?>
		// Stress/strain Tensor
	for (i=0; i< 6 ; i++)
	{
		stress[i] = 0.0;
	}
	for (i=0; i< 27; i++){
		stress[0] += geq[i]*my_ex[i]*my_ex[i];
		stress[1] += geq[i]*my_ex[i]*my_ey[i];
		stress[2] += geq[i]*my_ex[i]*my_ez[i];
		stress[3] += geq[i]*my_ey[i]*my_ey[i];
		stress[4] += geq[i]*my_ey[i]*my_ez[i];
		stress[5] += geq[i]*my_ez[i]*my_ez[i];
	}

	F_mu[0] = (0.5-tau)/tau * (Density_h-Density_l) * (stress[0]*gradPhi.x + stress[1]*gradPhi.y + stress[2]*gradPhi.z);
	F_mu[1] = (0.5-tau)/tau * (Density_h-Density_l) * (stress[1]*gradPhi.x + stress[3]*gradPhi.y + stress[4]*gradPhi.z);
	F_mu[2] = (0.5-tau)/tau * (Density_h-Density_l) * (stress[2]*gradPhi.x + stress[4]*gradPhi.y + stress[5]*gradPhi.z);
	F_total[0] = mu*gradPhi.x + F_pressure[0] + F_body[0] + F_mu[0];
	F_total[1] = mu*gradPhi.y + F_pressure[1] + F_body[1] + F_mu[1];
	F_total[2] = mu*gradPhi.z + F_pressure[2] + F_body[2] + F_mu[2];

<?R C( u, g %*% U) ?>
	U = U + (0.5*F_total[0])/rho;
	V = V + (0.5*F_total[1])/rho;
	W = W + (0.5*F_total[2])/rho;
}

// PHASE FIELD POPULATION UPDATE:
	tmp1 = (1.0 - 4.0*(C - 0.5)*(C - 0.5))/IntWidth;
<?R
	C(heq, EQ_h$feq * PV("C"))
	n = PV("n",c("x","y","z"))
if (Options$RT) {
	u_old = PV(c("u_old[0]","u_old[1]","u_old[2]"))
	pf_old= PV("PhaseF_old")
	pf    = PV("PhaseF")
	C(Fphi, myWeighting * PV("tmp1") * (U %*% n) + 3.0 * U %*% (pf*u - pf_old*u_old) )
} else {
	C(Fphi, myWeighting * PV("tmp1") * (U %*% n))
}	
# 	SRT Relaxation for h
	C(h, h - omega * (h - heq + 0.5*Fphi) + Fphi)
?>

real_t omega_g = 1.0/tau;
<?R
	F_tot = PV(c("F_total[0]","F_total[1]",	"F_total[2]"))	
	C(Fi, 3 * myWeighting * (F_tot %*% t(U)) )

	om= PV("omega_g")

	C(g, g - (geq+0.5*Fi)*om + Fi)
?>
	AddToTotalDensity( C );
}
#endif
